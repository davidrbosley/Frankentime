<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PreEmptive.Analytics.Common</name>
    </assembly>
    <members>
        <member name="T:PreEmptive.Analytics.Common.IOfflineStorageManager">
            <summary>
            Interface for defining an offline storage manager
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IOfflineStorageManager.MoveFile(System.String,System.String)">
            <summary>
            Moves a file from one location to another.
            </summary>
            <param name="origin">The file being moved.</param>
            <param name="destination">The new location of the file.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IOfflineStorageManager.GetFilesEndingWith(System.String,System.String)">
            <summary>
            Finds files in the offline data store.
            </summary>
            <param name="suffix">The string that the file name must end with</param>
            <param name="contains">An optional string that must also appear in the file name.</param>
            <returns>Filenames that end with the specified suffix and contains the required string.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IOfflineStorageManager.DeleteFile(System.String)">
            <summary>
            Deletes a file from offline storage.
            </summary>
            <param name="filename">The name of the file to delete.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IOfflineStorageManager.WriteToFile(System.String,System.String)">
            <summary>
            Writes a file to offline storage.
            </summary>
            <param name="filename">The name of the file.</param>
            <param name="text">The content to write to the file.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IOfflineStorageManager.ReadFile(System.String)">
            <summary>
            Retrieves the content of the specified file.
            </summary>
            <param name="filename">The name of the file.</param>
            <returns>The content of the file.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.ApplicationExpirationWarning.#ctor(System.Guid,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for the application expiration warning message.
            </summary>
            <param name="slid">The shelflife ID of the application</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.ApplicationExpiration.#ctor(System.Guid,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for the application expiration message.
            </summary>
            <param name="slid">The shelflife ID of the application</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.Tamper">
            <summary>
            Class for creating the tamper notification messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.Tamper.TagName">
            <summary>
            Name of the tamper tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.Tamper.TagDescription">
            <summary>
            A more descriptive name for tamper.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.Tamper.#ctor(System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for the tamper notification message
            </summary>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.ApplicationStart">
            <summary>
            Class for creating the application start messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.ApplicationStart.TagName">
            <summary>
            Name of the application start message.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.ApplicationStart.TagDescription">
            <summary>
            A more descriptive name for application start.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.ApplicationStart.#ctor(PreEmptive.Analytics.Common.Tags.HostTag,PreEmptive.Analytics.Common.Tags.UserTag,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for the application start message.
            </summary>
            <param name="hostTag">Contains information regarding the device on which the application is executing.</param>
            <param name="userTag">Information about the user executing the application.</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.ApplicationStop">
            <summary>
            Class for creating the application stop messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.ApplicationStop.TagName">
            <summary>
            Name of the application stop message.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.ApplicationStop.TagDescription">
            <summary>
            A more descriptive name for application stop.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.ApplicationStop.#ctor(PreEmptive.Analytics.Common.Tags.HostTag,PreEmptive.Analytics.Common.Tags.UserTag,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for the application stop message.
            </summary>
            <param name="host">Contains information regarding the device on which the application is executing.</param>
            <param name="user">Information about the user executing the application.</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.FeatureStart">
            <summary>
            Class for creating feature start messages.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.FeatureStart.#ctor(System.String,System.Guid,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for a feature start message.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="session">A Guid that identifies the current session</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
            <param name="group">A Guid representing the group the messages belong to.</param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.FeatureStart.TagDescription">
            <summary>
            A more descriptive name for feature start.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.FeatureStop">
            <summary>
            Class for creating feature stop messages.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.FeatureStop.#ctor(System.String,System.Guid,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for a feature stop message.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="session">A Guid that identifies the current session</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
            <param name="group">A Guid representing the group the messages belong to.</param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.FeatureStop.TagDescription">
            <summary>
            A more descriptive name for feature stop.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.PerformanceInfo">
            <summary>
            Class for storing the performance information used by the performance probe message.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.PerformanceInfo.TotalMemory">
            <summary>
            Total memory available on the device in megabytes.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.PerformanceInfo.UsedMemory">
            <summary>
            The amount of memory used by the application in megabytes.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.PerformanceInfo.CpuUtilization">
            <summary>
            An integer between 0 and 100 that represents the percent of the CPU being utilized.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.PerformanceProbe">
            <summary>
            Class for creating performance probe messages.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.PerformanceProbe.#ctor(System.String,PreEmptive.Analytics.Common.Messages.PerformanceInfo,PreEmptive.Analytics.Common.ExtendedKeys,System.Guid,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for a performance probe message.
            </summary>
            <param name="name">A unique name for the performance probe. The name must not be null or empty.</param>
            <param name="performance">An instance of PerformanceInfo that contains the data used to populate the performance probe message.</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binaryInfo">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.PerformanceProbe.TagName">
            <summary>
            Name of the tag for the performance probe message
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.PerformanceProbe.TagDescription">
            <summary>
            A more descriptive name for performance probe.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.SystemInfo">
            <summary>
            Class for storing system information used by the system profile message.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Cpus">
            <summary>
            A list of CPUInfo that describes the CPUs on the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Memory">
            <summary>
            Information describing the memory on the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Disks">
            <summary>
            A list of DiskInfo that describes the storage devices on the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Networks">
            <summary>
            A list of NetworkInfo that describes the networks available to the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Domain">
            <summary>
            Microsoft Windows specific domain information.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.TimeZone">
            <summary>
            Information describing the time zone the device is in.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.PageFiles">
            <summary>
            A list of PageFileInfo that describes the page files on the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Screen">
            <summary>
            Information describing the screen on the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Video">
            <summary>
            Information describing the video card on the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Sound">
            <summary>
            Information describing the sound card on the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Modem">
            <summary>
            Information describing the modem used by the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.TerminalServices">
            <summary>
            Information describing the terminal service (e.g. thin-client) the application is running on.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Manufacturer">
            <summary>
            A human readable form of the manufacturer of the host system
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.Model">
            <summary>
            A human readable form of the model of the host system
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Messages.SystemInfo.PowerState">
            <summary>
            A human readable form of the current power state of the host system
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.SystemProfile">
            <summary>
            Class for sending system profile messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.SystemProfile.TagName">
            <summary>
            Name of the tag for the system profile message.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.SystemProfile.TagDescription">
            <summary>
            A more descriptive name for system profile.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.SystemProfile.#ctor(PreEmptive.Analytics.Common.Messages.SystemInfo,System.Boolean,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for the system profile message.
            </summary>
            <param name="info">An instance of SystemInfo that contains the data used to populate the system profile message.</param>
            <param name="omitpii">A boolean that determines if personally identifiable information should be included in the system profile message.</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.Fault">
            <summary>
            Class for creating fault messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.Fault.TagName">
            <summary>
            Name of the tag for the fault message.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.Fault.TagDescription">
            <summary>
            A more descriptive name for exception messages.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.Fault.#ctor(PreEmptive.Analytics.Common.IPlatform,PreEmptive.Analytics.Common.ExceptionInfo,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for the fault message.
            </summary>
            <param name="platform">Platform specific implementations of methods for retrieving stack information.</param>
            <param name="exceptionInfo">Information describing the exception.</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.Fault.GetStackInfo(System.String,System.String)">
            <summary>
            Processes the string representation of a stack trace.
            </summary>
            <param name="stackTrace">String representation of the stack trace.</param>
            <param name="customStackTraceRegex">Optional custom regex for processing the stack trace.</param>
            <returns>IList of StackInfo that represents the stack trace.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.SessionStart">
            <summary>
            Class for creating session start messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.SessionStart.TagName">
            <summary>
            Name of the tag for the session start message.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.SessionStart.TagDescription">
            <summary>
            A more descriptive name for session start.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.SessionStart.#ctor(System.Guid,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for the session start message.
            </summary>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Messages.SessionStop">
            <summary>
            Class for creating session stop messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.SessionStop.TagName">
            <summary>
            Name of the tag for the session stop message.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Messages.SessionStop.TagDescription">
            <summary>
            A more descriptive name for session stop.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Messages.SessionStop.#ctor(System.Guid,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for the session stop message.
            </summary>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.BlankLogger">
            <summary>
            A logger which does nothing
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.BlankLogger.LogError(System.String)">
            <summary>
            Does nothing
            </summary>
            <param name="message">nothing</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.BlankLogger.LogWarning(System.String)">
            <summary>
            Does nothing
            </summary>
            <param name="message">nothing</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.BlankLogger.LogInfo(System.String)">
            <summary>
            Does nothing
            </summary>
            <param name="message">nothing</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ConsistentTimer">
            <summary>
            A Timer class that doesn't use ThreadPool threads, and instead takes an IAsyncProvider. 
            This is because getting a thread pool thread to occur sooner than a few seconds later is impossible.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.DictionaryAttributeLimiter">
            <summary>
            An implementation of IAttributeLimiter using Dictionary&lt;TAG, Dictionary&lt;ATTRIBUTE, LIMIT&gt;&gt;
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.DictionaryAttributeLimiter.#ctor">
            <summary>
            Create a DictionaryAttributeLimiter
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.DictionaryAttributeLimiter.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Int32}})">
            <summary>
            Create a DictionaryAttributeLimiter, making a deep clone of the chosen existing dictionary 
            </summary>
            <param name="clone">The Dictionary or DictionaryAttributeLimiter to clone</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.DictionaryAttributeLimiter.MaxSize(System.String,System.String)">
            <summary>
            The maximum size of the field specified by the specified tag and attribute name
            Anything over this amount of raw characters(not bytes and without XML escaping) will be truncated
            </summary>
            <param name="tagname">The tag name specification for the field on the server</param>
            <param name="attribute">The attribute name specification for the field on the server</param>
            <returns>The maximum amount of characters for that field. Null should be returned if there is no limit</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.DictionaryAttributeLimiter.Set(System.String,System.String,System.Int32)">
            <summary>
            Set the maximum size of the field specified by the specified tag and attribute name
            </summary>
            <param name="tag">The tag name specification for the field on the server</param>
            <param name="attribute">The attribute name specification for the field on the server</param>
            <param name="limit">The maximum amount of raw characters(whole UTF-8 characters, not bytes, and unescaped)</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.DictionaryAttributeLimiter.Clone">
            <summary>
            Make a deep clone of this dictionary
            </summary>
            <returns>The cloned object</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.EndpointAttributeLimits">
            <summary>
            Holds the field size limits for the officially supported PreEmptive Solutions endpoints
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.EndpointAttributeLimits.Common">
            <summary>
            The "common" field size limits taken as the minimum field sizes of PATFS and RI
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.EndpointAttributeLimits.PATFS">
            <summary>
            The field size limits of a PreEmptive Analytics for TFS endpoint
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.EndpointAttributeLimits.RI">
            <summary>
            The field size limits of the Runtime Intelligence endpoint
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.EndpointAttributeLimits.None">
            <summary>
            No field size limits
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IAttributeLimiter">
            <summary>
            Represents a way for the Client to get the field size limits of the server it sends messages to
            This is to prevent from sending unnecessarily large messages if portions of it will be truncated at the server
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IAttributeLimiter.MaxSize(System.String,System.String)">
            <summary>
            The maximum size of the field specified by the specified tag and attribute name
            Anything over this amount of raw characters(not bytes and without XML escaping) will be truncated
            </summary>
            <param name="tagname">The tag name specification for the field on the server</param>
            <param name="attribute">The attribute name specification for the field on the server</param>
            <returns>The maximum amount of characters for that field. Null should be returned if there is no limit</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IClientToolsProvider">
            <summary>
            An interface for the common tools that the CoreClient provides, such as Configuration, Logging, and Platform
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.IClientToolsProvider.AppStarted">
            <summary>
            A value representing if the Client is started or not
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ILoggerProvider">
            <summary>
            An object capable of providing a Logger instance
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ILoggerProvider.Logger">
            <summary>
            The logger provided
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IPlatformProvider">
            <summary>
            An object capable of providing a Platform instance
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.IPlatformProvider.Platform">
            <summary>
            The platform provided
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IQueueTransmitter">
            <summary>
            An interface which describes an IQueueProcessor that is also capable of sending batches to an endpoint
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IQueueTransmitter.Transmit(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Attempts to send a MessageBatch to a server.
            </summary>
            <returns>If the send succeeded.</returns>
        </member>
        <member name="E:PreEmptive.Analytics.Common.IQueueTransmitter.TransmissionFailed">
            <summary>
            Signals that the transmission of this batch has failed (and will not be reattempted without intervention)
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IQueueTransmitter.FailTransmissionsNow">
            <summary>
            Immediately interrupts all transmissions and causes them to fail. 
            If OfflineStorage is disabled, all messages are at least sent to the XMLTransmitter, but assumed to have failed.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IQueuePersister">
            <summary>
            A QueueProcessor that is capable of saving a batch of messages offline
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IQueuePersister.SaveDataOffline(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Saves the specified batch to offline storage
            </summary>
            <param name="batch">the batch to save</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IConfigurationProvider">
            <summary>
            An interface for an object capable of providing a copy of the current Client's Configuration
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.IConfigurationProvider.Configuration">
            <summary>
            The current Client's Configuration
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ILogger">
            <summary>
            Interface that needs to be implemented to create a custom logger implementation.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ILogger.LogError(System.String)">
            <summary>
            The function that will be called when an error needs to be logged. This indicates that a setting or behavior of the API is incorrect.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ILogger.LogWarning(System.String)">
            <summary>
            The function that will be called when an error needs to be logged. This indicates that the API may not perform as expected.
            </summary>
            <param name="message">The message that describes the Warning.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ILogger.LogInfo(System.String)">
            <summary>
            The function that will be called when an error needs to be logged. This is used to report general behavior of the API.
            </summary>
            <param name="message">The message describing general API behavior.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IMessageDequeuer">
            <summary>
            An interface for an object capable of dequeing messages
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IMessageDequeuer.DequeueMessages">
            <summary>
            A thread safe way of removing messages for sending.
            </summary>
            <returns>The messages that have been removed</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IMessageDequeuer.PeekMessages">
            <summary>
            Makes a clone of the list holding the messages and returns the copy of the list of messages
            Unlike Dequeing, this does not consume the messages returned. 
            </summary>
            <returns>The messages currently in the queue</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.LoggerBase">
            <summary>
            Used to share common functionality between loggers of different platforms.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.LoggerBase.#ctor(PreEmptive.Analytics.Common.LoggingLevel)">
            <summary>
            Sets the logging level to the specified logging level upon the creation of a new instance.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.LoggerBase.MessageLoggingLevel">
            <summary>
            Determines if logging messages should be saved to disk.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.LoggingLevel">
            <summary>
            Used to specify the level of logging that should be done. This is done using bit flags allowing for combinations of logging levels.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.LoggingLevel.None">
            <summary>
            Do not perform any logging.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.LoggingLevel.Error">
            <summary>
            Log failures in the API.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.LoggingLevel.Warning">
            <summary>
            Log situations where the API may not perform as expected as well as errors.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.LoggingLevel.Info">
            <summary>
            Log general information about the API as well as warnings and errors.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IPlatformClient">
            <summary>
            The methods implemented by a Platform Specific Client, commonly called `PAClient`
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.IPlatformClient.Core">
            <summary>
            The underlying CoreClient instance used by the PlatformClient.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.ApplicationStart(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,PreEmptive.Analytics.Common.IFlowController)">
            <summary>
            Starts the client system if it has not yet been started and sends an application start message.
            </summary>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="flowController">An optional FlowController instance used to define the Client's interaction with the server.</param>
            <returns>Returns true if the request was accepted and the PA Client is now running.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.ApplicationStop(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,System.Boolean)">
            <summary>
            Stops the PreEmptive Analytics client.
            </summary>
            <remarks>
            This method halts the client system and releases all connections and resources used by it.
            To continue interaction with the client system ApplicationStart() will need to be called again: all other requests to the Client will be ignored. 
            If the client system is not currently running then the request is ignored.
            </remarks>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="immediate">If the API instance is configured for session extension, this can be used to immediately stop the API</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.ApplicationStopSync(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,System.Boolean)">
            <summary>
            Stops the PreEmptive Analytics client in a synchronous manner.
            </summary>
            <remarks>
            This method halts the client system and releases all connections and resources used by it.
            To continue interaction with the client system ApplicationStart() will need to be called again: all other requests to the Client will be ignored. 
            If the client system is not currently running then the request is ignored.
            </remarks>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="immediate">If the API instance is configured for session extension, this can be used to immediately stop the API</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.ApplicationStopAsync(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,System.Boolean)">
            <summary>
            Stops the PreEmptive Analytics client in an asynchronous manner.
            </summary>
            <remarks>
            This method halts the client system and releases all connections and resources used by it.
            To continue interaction with the client system ApplicationStart() will need to be called again: all other requests to the Client will be ignored. 
            If the client system is not currently running then the request is ignored.
            </remarks>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="immediate">If the API instance is configured for session extension, this can be used to immediately stop the API</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.FeatureTick(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing the occurrence of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.FeatureStart(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo,System.Nullable{System.Guid})">
            <summary>
            Sends a message representing the start of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="group">A Guid representing the message group.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.FeatureStartWithGroup(System.String,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing the start of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="group">A Guid representing the message group.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.FeatureStopWithGroup(System.String,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing the stop of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="group">A Guid representing the message group.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.FeatureStop(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo,System.Nullable{System.Guid})">
            <summary>
            Sends a message representing the stop of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="group">A Guid representing the message group.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.ReportException(PreEmptive.Analytics.Common.ExceptionInfo)">
            <summary>
            Sends a message representing an exception.
            </summary>
            <param name="exceptionInfo">An instance of ExceptionInfo that holds information that populates the exception message.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.ReportException(PreEmptive.Analytics.Common.ExceptionInfo,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing an exception.
            </summary>
            <param name="exceptionInfo">An instance of ExceptionInfo that holds information that populates the exception message.</param>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.ReportException(PreEmptive.Analytics.Common.ExceptionInfo,System.Boolean,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing an exception.
            </summary>
            <param name="exceptionInfo">An instance of ExceptionInfo that holds information that populates the exception message.</param>
            <param name="optInOverride">Should the optIn setting be overridden.</param>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.SystemProfile(PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a system profile message.
            </summary>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.PerformanceProbe(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message describing the performance of the device and the applicaion.
            </summary>
            <param name="name">A name that describes the point at which the performance probe is performend. The name must not be null or empty.</param>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="info">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.NewFeatureGroup">
            <summary>
            Used to get a new Guid for a feature group.
            </summary>
            <returns>Returns a new Guid.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.SetSendDisabled(System.Boolean)">
            <summary>
            Disables or enables the sending of messages for the currently running Client.
            </summary>
            <param name="value">Whether or not the sending of messages should be disabled.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.SendMessages">
            <summary>
            Signals the Client to send all of the messages that are currently in the queue.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.SetSessionOptIn(System.Boolean)">
            <summary>
            Enables or disables the optIn setting for the currently running Client.
            </summary>
            <param name="value">The value to set optIn to.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.ReportTamper(PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message reporting that the application has been tampered with.
            </summary>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.ReportExpiration(System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message reporting that the application's license has expired.
            </summary>
            <param name="slid">The shelflife ID of the application</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatformClient.ReportExpirationWarning(System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message reporting that the user has been warned that the application's license is close to expiration
            </summary>
            <param name="slid">The shelflife ID of the application</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.OfflineDataStore">
            <summary>
            Class for handling the offline storage of messages.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.OfflineDataStore.Logger">
            <summary>
            A logger for debug log messages to be sent to
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.OfflineDataStore.#ctor(PreEmptive.Analytics.Common.IOfflineStorageManager,PreEmptive.Analytics.Common.ILogger)">
            <summary>
            Constructor for the OfflineDataStore.
            </summary>
            <param name="manager">An instance of IOfflineStorageManager that handles platform specific filesystem access.</param>
            <param name="logger">A logger for debug log messages to be sent to</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.OfflineDataStore.SaveBatch(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Saves off a batch of messages.
            </summary>
            <param name="messagebatch">The batch of messages to be saved.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.OfflineDataStore.GetSavedBatch">
            <summary>
            Gets the next cached MessageBatch that will be sent.
            </summary>
            <returns>The next cached MessageBatch.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.OfflineDataStore.ClearBatch(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Removest the specified message batch.
            </summary>
            <param name="messagebatch">The MessageBatch to remove.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.OfflineDataStore.Dispose">
            <summary>
            Cleans up any resources used by the OfflineDataStore.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.PlatformClient">
            <summary>
            Class that serves as a bridge between the CoreClient and platforms that cannot directly instatiate the CoreClient.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.GetNewPlatform">
            <summary>
            Retrieves the platform the of the device.
            </summary>
            <returns>An object that defines the platform.</returns>
        </member>
        <member name="P:PreEmptive.Analytics.Common.PlatformClient.StartupConfiguration">
            <summary>
            The Configuration object that defines the behavior of the Client.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.GetActiveDefaultSession">
            <summary>
            Gets the Session ID that is being used for the current API run. This ID can be passed to other APIs to activate subordinate mode.
            </summary>
            <returns>The Session ID</returns>
        </member>
        <member name="P:PreEmptive.Analytics.Common.PlatformClient.Logger">
            <summary>
            ILogger instance that determines how logging is done.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.PlatformClient.Core">
            <summary>
            The underlying CoreClient instance used by the PlatformClient.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.#ctor(System.String,System.String,PreEmptive.Analytics.Common.ILogger)">
            <summary>
            Constructor for the PlatformClient.
            </summary>
            <param name="companyID">A Guid that represents the companyID.</param>
            <param name="applicationID">A Guid that represents the applicationID.</param>
            <param name="logger">ILogger instance that determines how logging is done.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.#ctor(System.Guid,System.Guid,PreEmptive.Analytics.Common.ILogger)">
            <summary>
            Constructor for the PlatformClient.
            </summary>
            <param name="companyID">A Guid that represents the companyID.</param>
            <param name="applicationID">A Guid that represents the applicationID.</param>
            <param name="logger">ILogger instance that determines how logging is done.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.#ctor(PreEmptive.Analytics.Common.Configuration,PreEmptive.Analytics.Common.ILogger)">
            <summary>
            Constructor for the PlatformClient.
            </summary>
            <param name="config">A Configuration object that defines the behavior of the Client.</param>
            <remarks>Modifying the configuration object will have no effect on the behavior of the API after calling ApplicationStart</remarks>
            <param name="logger">ILogger instance that determines how logging is done.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.ApplicationStart(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,PreEmptive.Analytics.Common.IFlowController)">
            <summary>
            Starts the client system if it has not yet been started and sends an application start message.
            </summary>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="flowController">An optional FlowController instance used to define the Client's interaction with the server.</param>
            <returns>Returns true if the request was accepted and the PA Client is now running.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.ApplicationStop(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,System.Boolean)">
            <summary>
            Stops the PreEmptive Analytics client.
            </summary>
            <remarks>
            This method halts the client system and releases all connections and resources used by it.
            To continue interaction with the client system ApplicationStart() will need to be called again: all other requests to the Client will be ignored. 
            If the client system is not currently running then the request is ignored.
            </remarks>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="immediate">If the API instance is configured for session extension, this can be used to immediately stop the API</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.ApplicationStopSync(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,System.Boolean)">
            <summary>
            Stops the PreEmptive Analytics client in a synchronous manner.
            </summary>
            <remarks>
            This method halts the client system and releases all connections and resources used by it.
            To continue interaction with the client system ApplicationStart() will need to be called again: all other requests to the Client will be ignored. 
            If the client system is not currently running then the request is ignored.
            </remarks>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="immediate">If the API instance is configured for session extension, this can be used to immediately stop the API</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.ApplicationStopAsync(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,System.Boolean)">
            <summary>
            Stops the PreEmptive Analytics client in an asynchronous manner.
            </summary>
            <remarks>
            This method halts the client system and releases all connections and resources used by it.
            To continue interaction with the client system ApplicationStart() will need to be called again: all other requests to the Client will be ignored. 
            If the client system is not currently running then the request is ignored.
            </remarks>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="immediate">If the API instance is configured for session extension, this can be used to immediately stop the API</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.FeatureTick(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing the occurrence of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.FeatureStart(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo,System.Nullable{System.Guid})">
            <summary>
            Sends a message representing the start of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="group">A Guid representing the message group.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.FeatureStartWithGroup(System.String,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing the start of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="group">A Guid representing the message group.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.FeatureStopWithGroup(System.String,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing the stop of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="group">A Guid representing the message group.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.FeatureStop(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo,System.Nullable{System.Guid})">
            <summary>
            Sends a message representing the stop of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="group">A Guid representing the message group.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.ReportTamper(PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message reporting that the application has been tampered with.
            </summary>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.ReportExpiration(System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message reporting that the application's license has expired.
            </summary>
            <param name="slid">The shelflife ID of the application</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.ReportExpirationWarning(System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message reporting that the user has been warned that the application's license is close to expiration
            </summary>
            <param name="slid">The shelflife ID of the application</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.ReportException(PreEmptive.Analytics.Common.ExceptionInfo)">
            <summary>
            Sends a message representing an exception.
            </summary>
            <param name="exceptionInfo">An instance of ExceptionInfo that holds information that populates the exception message.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.ReportException(PreEmptive.Analytics.Common.ExceptionInfo,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing an exception.
            </summary>
            <param name="exceptionInfo">An instance of ExceptionInfo that holds information that populates the exception message.</param>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.ReportException(PreEmptive.Analytics.Common.ExceptionInfo,System.Boolean,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing an exception.
            </summary>
            <param name="exceptionInfo">An instance of ExceptionInfo that holds information that populates the exception message.</param>
            <param name="optInOverride">Should the optIn setting be overridden.</param>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.SystemProfile(PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a system profile message.
            </summary>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.PerformanceProbe(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message describing the performance of the device and the applicaion.
            </summary>
            <param name="name">A name that describes the point at which the performance probe is performend. The name must not be null or empty.</param>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="info">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.NewFeatureGroup">
            <summary>
            Used to get a new Guid for a feature group.
            </summary>
            <returns>Returns a new Guid.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.SetSendDisabled(System.Boolean)">
            <summary>
            Disables or enables the sending of messages for the currently running Client.
            </summary>
            <param name="value">Whether or not the sending of messages should be disabled.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.SendMessages">
            <summary>
            Signals the Client to send all of the messages that are currently in the queue.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.SetSessionOptIn(System.Boolean)">
            <summary>
            Enables or disables the optIn setting for the currently running Client.
            </summary>
            <param name="value">The value to set optIn to.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.PlatformClient.CoreDefaultStopBehavior">
            <summary>
            Gets the usual ApplicationStop behavior defaults that are appropriate for most platforms
            </summary>
            <returns></returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.BinaryInfo">
            <summary>
            Describes the binary file (executable) which is sending the message
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.BinaryInfo.GetCurrent">
            <summary>
            Gets a BinaryInfo object and will attempt to fill in Version and Name from the calling assembly information
            </summary>
            <returns></returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.BinaryInfo.LoadFromAssembly(System.Reflection.Assembly)">
            <summary>
            Sets the current BinaryInfo values based on the provided Assembly.
            </summary>
            <param name="asm">The Assembly to gather binary information from.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.BinaryInfo.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.Nullable{System.DateTime})">
            <summary>
            Constructor for BinaryInfo.
            </summary>
            <param name="method">Name of the method which is sending the message.</param>
            <param name="class">Name of the class which is sending the message.</param>
            <param name="asmnam">Name of the binary.</param>
            <param name="version">Version of the binary.</param>
            <param name="id">A unique identifier given to the binary.</param>
            <param name="modified">Time the binary was last modified.</param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.BinaryInfo.ID">
            <summary>
            A unique identifier given to the binary.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.BinaryInfo.LastModified">
            <summary>
            Time the binary was last modified.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.BinaryInfo.Name">
            <summary>
            Name of the binary.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.BinaryInfo.Version">
            <summary>
            Version of the binary.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.BinaryInfo.ClassName">
            <summary>
            Name of the class which is sending the message.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.BinaryInfo.MethodName">
            <summary>
            Name of the method which is sending the message.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.BinaryInfo.ToTag">
            <summary>
            Converts the current BinaryInfo instance to a BinaryInfoTag.
            </summary>
            <returns>The resulting BinaryInfoTag.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ComponentInfo">
            <summary>
            Struct that contains information about a component of an application.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ComponentInfo.Name">
            <summary>
            The name of the component.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ComponentInfo.Version">
            <summary>
            The version of the component.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ComponentInfo.FullName">
            <summary>
            The full name of the assembly which is also known as the display name.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ComponentInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            A Constructor for ComponentInfo.
            </summary>
            <param name="name">The name of the component.</param>
            <param name="version">The version of the component.</param>
            <param name="fullname">The full name of the assembly which is also known as the display name.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ExceptionInfo">
            <summary>
            Class for handling exception information.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ExceptionInfo.Exception">
            <summary>
            The exception object.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ExceptionInfo.ExceptionType">
            <summary>
            The type of the exception.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ExceptionInfo.Message">
            <summary>
            A human readable message that describes the condition.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ExceptionInfo.Contact">
            <summary>
            Contact information for the end user (e.g. an email address).
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ExceptionInfo.Comment">
            <summary>
            A comment string provided by the end user.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExceptionInfo.#ctor">
            <summary>
            Constructor for ExceptionInfo.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExceptionInfo.#ctor(PreEmptive.Analytics.Common.ExceptionType,System.Exception,System.String,System.String,System.String)">
            <summary>
            Constructor for ExceptionInfo.
            </summary>
            <param name="type">The type of the exception.</param>
            <param name="exception">The exception object.</param>
            <param name="contact">Contact information for the end user (e.g. an email address).</param>
            <param name="comment">A comment string provided by the end user.</param>
            <param name="message">A human readable message that describes the condition.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExceptionInfo.Caught(System.Exception,System.String,System.String,System.String)">
            <summary>
            Creates a new exception that is of type ExceptionType.Caught.
            </summary>
            <param name="exception">The exception object.</param>
            <param name="contact">Contact information for the end user (e.g. an email address).</param>
            <param name="comment">A comment string provided by the end user.</param>
            <param name="message">A human readable message that describes the condition.</param>
            <returns>The resulting ExceptionInfo.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExceptionInfo.Caught(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new exception that is of type ExceptionType.Caught.
            </summary>
            <param name="name">The name of the exception.</param>
            <param name="message">A human readable message that describes the condition.</param>
            <param name="callstack">The callstack representing the state when the exception occurred.</param>
            <param name="callstackregex">The regular expression that should be used to parse the callstack.</param>
            <param name="contact">A comment string provided by the end user.</param>
            <param name="comment">A comment string provided by the end user.</param>
            <returns>The resulting ExceptionInfo.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExceptionInfo.Uncaught(System.Exception,System.String,System.String,System.String)">
            <summary>
            Creates a new exception that is of type ExceptionType.Uncaught.
            </summary>
            <param name="exception">The exception object.</param>
            <param name="contact">Contact information for the end user (e.g. an email address).</param>
            <param name="comment">A comment string provided by the end user.</param>
            <param name="message">A human readable message that describes the condition.</param>
            <returns>The resulting ExceptionInfo.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExceptionInfo.Uncaught(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new exception that is of type ExceptionType.Uncaught.
            </summary>
            <param name="name">The name of the exception.</param>
            <param name="message">A human readable message that describes the condition.</param>
            <param name="callstack">The callstack representing the state when the exception occurred.</param>
            <param name="callstackregex">The regular expression that should be used to parse the callstack.</param>
            <param name="contact">A comment string provided by the end user.</param>
            <param name="comment">A comment string provided by the end user.</param>
            <returns>The resulting ExceptionInfo.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExceptionInfo.Thrown(System.Exception,System.String,System.String,System.String)">
            <summary>
            Creates a new exception that is of type ExceptionType.Thrown.
            </summary>
            <param name="exception">The exception object.</param>
            <param name="contact">Contact information for the end user (e.g. an email address).</param>
            <param name="comment">A comment string provided by the end user.</param>
            <param name="message">A human readable message that describes the condition.</param>
            <returns>The resulting ExceptionInfo.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExceptionInfo.Thrown(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new exception that is of type ExceptionType.Thrown.
            </summary>
            <param name="name">The name of the exception.</param>
            <param name="message">A human readable message that describes the condition.</param>
            <param name="callstack">The callstack representing the state when the exception occurred.</param>
            <param name="callstackregex">The regular expression that should be used to parse the callstack.</param>
            <param name="contact">A comment string provided by the end user.</param>
            <param name="comment">A comment string provided by the end user.</param>
            <returns>The resulting ExceptionInfo.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExceptionInfo.CreateException(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an Exception object with the provided information.
            </summary>
            <param name="name">The name of the exception.</param>
            <param name="exceptionmessage">A human readable message that describes the condition.</param>
            <param name="callstack">The callstack representing the state when the exception occurred.</param>
            <param name="callstackregex">The regular expression that should be used to parse the callstack.</param>
            <returns>The resulting Exception object.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ExceptionType">
            <summary>
            Values that represent the type of exception. Values come from Win32 API.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ExceptionType.Caught">
            <summary>
            A caught exception.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ExceptionType.Uncaught">
            <summary>
            An uncaught exception.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ExceptionType.Thrown">
            <summary>
            A thrown exception.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ExceptionDataKeys">
            <summary>
            These are keys that can be added or queried on the Exception.Data property.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ExceptionDataKeys.ExceptionMessage">
            <summary>
            [String] Overrides Exception's Message.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ExceptionDataKeys.ExceptionName">
            <summary>
            [String] Overrides Exception's Class Name.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ExceptionDataKeys.StackTrace">
            <summary>
            [String] Overrides the Exception's Stack Trace.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ExceptionDataKeys.StackTraceRegex">
            <summary>
            [String] A RegEx that defines the structure of the StackTrace Value.
            </summary>
            <remarks>
            The RegEx is split up using the following named groups:
            <br />
            * type: A class containing a method in the stack.
            * meth: A method in the stack.
            * sig : The method's signature in the stack.
            * file: The file where the stack frame occured.
            * line: The line where the stack frame occured.
            </remarks>
            <example>
            Take the following stacktrace line:
            <code>"Type->Method(void):File.cs:10"</code>
            
            You could use the following regex:
            <code>"^(?&lt;type&gt;.*)->(?&lt;meth&gt;.*)(?&lt;sig&gt;\(.*\))\:(?&lt;file&gt;.*)\:(?&lt;line&gt;.*)$"</code>
            </example>
        </member>
        <member name="F:PreEmptive.Analytics.Common.ExceptionDataKeys.IncludePreEmptiveAnalyticsFrames">
            <summary>
            [Bool] A boolean that controls if calls in the PreEmptive Analytics API Framework are included in stack traces.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ExtendedKeys">
            <summary>
            Class that handles extended key data used for sending additional information with messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ExtendedKeys.Map">
            <summary>
            IDictionary that contains all of the extended keys that have been added keyed by the ExtendedKey's key.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKeys.#ctor">
            <summary>
            Constructor for ExtendedKeys.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKeys.Add(System.String,System.String)">
            <summary>
            Adds a new ExtendedKey with the provided key and value.
            </summary>
            <param name="key">The key to use. Excessive whitespace will be removed and length is limited to 2000 characters.</param>
            <param name="value">The value to use. Length is limited to 4000 characters.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKeys.Add(System.String,System.Int32)">
            <summary>
            Adds a new ExtendedKey with the provided key and value.
            </summary>
            <param name="key">The key to use. Excessive whitespace will be removed and length is limited to 2000 characters.</param>
            <param name="value">The value to use. The provided value will be interpreted as a numeric value by the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKeys.Add(System.String,System.Int64)">
            <summary>
            Adds a new ExtendedKey with the provided key and value.
            </summary>
            <param name="key">The key to use. Excessive whitespace will be removed and length is limited to 2000 characters.</param>
            <param name="value">The value to use. The provided value will be limited to 18 digits and interpreted as a numeric value by the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKeys.Add(System.String,System.Single)">
            <summary>
            Adds a new ExtendedKey with the provided key and value.
            </summary>
            <param name="key">The key to use. Excessive whitespace will be removed and length is limited to 2000 characters.</param>
            <param name="value">The value to use. The provided value will be limited to 18 digits and 5 decimal places as well as being interpreted as a numeric value by the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKeys.Add(System.String,System.Double)">
            <summary>
            Adds a new ExtendedKey with the provided key and value.
            </summary>
            <param name="key">The key to use. Excessive whitespace will be removed and length is limited to 2000 characters.</param>
            <param name="value">The value to use. The provided value will be limited to 18 digits and 5 decimal places as well as being interpreted as a numeric value by the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKeys.Add(System.String,System.Decimal)">
            <summary>
            Adds a new ExtendedKey with the provided key and value.
            </summary>
            <param name="key">The key to use. Excessive whitespace will be removed and length is limited to 2000 characters.</param>
            <param name="value">The value to use. The provided value will be limited to 18 digits and 5 decimal places as well as being interpreted as a numeric value by the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKeys.Add(PreEmptive.Analytics.Common.ExtendedKey)">
            <summary>
            Adds the ExtendedKey to the map.
            </summary>
            <param name="data">The newly created extended key to add.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKeys.ToTags">
            <summary>
            Converts the Extended Keys into ExtendedKeyTags 
            </summary>
            <returns>The list of extended key tags</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ExtendedKey">
            <summary>
            Class that handles the creation of extended key data used for sending additional information with messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ExtendedKey.Key">
            <summary>
            The trimmed string key.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ExtendedKey.Value">
            <summary>
            The formatted value.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ExtendedKey.IsNumeric">
            <summary>
            Indicates if the server should interpret this value as a numeric value.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKey.#ctor(System.String,System.String)">
            <summary>
            Constructor for a new ExtendedKey that properly formats the key and value.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add. Length is limited to 4000 characters.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKey.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for a new ExtendedKey that properly formats the key and value.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add. The provided value will be interpreted as a numeric value by the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKey.#ctor(System.String,System.Int64)">
            <summary>
            Constructor for a new ExtendedKey that properly formats the key and value.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add. The provided value will be limited to 18 digits and interpreted as a numeric value by the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKey.#ctor(System.String,System.Single)">
            <summary>
            Constructor for a new ExtendedKey that properly formats the key and value.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add. The provided value will be limited to 18 digits and 5 decimal places as well as being interpreted as a numeric value by the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKey.#ctor(System.String,System.Double)">
            <summary>
            Constructor for a new ExtendedKey that properly formats the key and value.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add. The provided value will be limited to 18 digits and 5 decimal places as well as being interpreted as a numeric value by the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKey.#ctor(System.String,System.Decimal)">
            <summary>
            Constructor for a new ExtendedKey that properly formats the key and value.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add. The provided value will be limited to 18 digits and 5 decimal places as well as being interpreted as a numeric value by the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKey.TrimFloatingPointNumbers(System.Single)">
            <summary>
            Restrict the floating point number to 18 digits and 5 decimal places.
            </summary>
            <param name="value">The value to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKey.TrimFloatingPointNumbers(System.Double)">
            <summary>
            Restrict the floating point number to 18 digits and 5 decimal places.
            </summary>
            <param name="value">The value to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ExtendedKey.TrimFloatingPointNumbers(System.Decimal)">
            <summary>
            Restrict the floating point number to 18 digits and 5 decimal places.
            </summary>
            <param name="value">The value to format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.FeatureCorrelator">
            <summary>
            Groups together feature start and stop messages by associating their group ID.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FeatureCorrelator.#ctor(PreEmptive.Analytics.Common.IFeatureGroupDictionary,PreEmptive.Analytics.Common.IFeaturePartitioner)">
            <summary>
            Constructor for the FeatureCorrelator.
            </summary>
            <param name="featuregroups">A dictionary used for storing the groups of features.</param>
            <param name="partitioner">A class that provides a method for splitting up features.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FeatureCorrelator.Start(System.String)">
            <summary>
            Method for handling the grouping of feature start messages.
            </summary>
            <param name="name">The name of the feature.</param>
            <returns>The feature group the message belongs to.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FeatureCorrelator.Stop(System.String)">
            <summary>
            Method for handling the grouping of feature stop messages.
            </summary>
            <param name="name">The name of the feature.</param>
            <returns>The feature group the message belongs to.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.FlowController">
            <summary>
            Class that used to manage the behavior of the message queue.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.QueueSize">
            <summary>
            The maximum number of messages that can be held in the queue.
            Note that this will adjust HighWater to (QueueSize * 2) / 3
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.HighWater">
            <summary>
            The point at which queued messages should be batched and sent.
            Note that if this is set to a higher value than QueueSize, then this value will be adjusted to QueueSize - 1
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.MaximumBatchSize">
            <summary>
            The maximum size a message batch can be, in bytes.
            If a batch exceeds this size, it is split into multiple batches
            If a single message exceeds this size, it will be discarded if transmission fails at any time
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.MaximumInterval">
            <summary>
            The maximum amout of time the transmitter should wait between checking the message queue specified in milliseconds.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.MinimumInterval">
            <summary>
            The minimum amout of time the transmitter should wait between checking the message queue specified in milliseconds.
            Note: If this is set to a higher value than MaximumInterval, this value will be adjusted down to MaximumInterval
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.Gain">
            <summary>
            The rate at which the interval should be changed in relation to the number of messages queued. This is an integer greater than zero that acts as a percentage.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.QuietGain">
            <summary>
            The rate at which the interval should be changed when the queue is empty. 
            This is an integer greater than zero and greater than or equal to 100 that acts as a percentage. 
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.Offline">
            <summary>
            Is the transmission of messages prohibited.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.SupportOfflineStorage">
            <summary>
            Is offline storage of messages permitted.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.SendDisabled">
            <summary>
            Is the transmission of messages temporarily disabled.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.MaximumSequentialFailureCount">
            <summary>
            The maximum number of sequential transmission failures before waiting the duration of the RetryTimeout to retry sending.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.RetryTimeout">
            <summary>
            The number of milliseconds to wait before allowing transmissions after a series of sequential failures.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.LastSendTime">
            <summary>
            Last time messages were sent specified int ticks.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.Interval">
            <summary>
            The time to wait between automatic batching and sending of messages specified in milliseconds.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.SequentialFailureCount">
            <summary>
            The current number of sequential transmission failures.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.RetryTime">
            <summary>
            The time when message sending will resume. Specified in ticks.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.MinimumFailureCount">
            <summary>
            The minimum amount of times a message should be attempted to be sent 
            before becoming eligible for deletion from offline storage
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FlowController.MinimumTimeToLive">
            <summary>
            The minimum age(in seconds) a message must be before it becomes eligible for deletion
            from offline storage
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FlowController.#ctor">
            <summary>
            Constructor for the FlowController.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FlowController.Initialize">
            <summary>
            Set default values for the FlowController.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FlowController.CanStartClient">
            <summary>
            Determines if the CoreClient instance should actually start queueing of messages
            </summary>
            <returns>True if it should start, false if not</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FlowController.BatchHasExpired(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Determines if a Batch has expired and is eligible for deletion/dropping
            </summary>
            <param name="batch">The batch to check</param>
            <returns>True if the batch should be deleted. False if it should be kept and cached</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FlowController.GetInterval(System.Int32)">
            <summary>
            Calculates the time to wait until the next automatic batching and sending of messages.
            </summary>
            <param name="numberOfMessages">A count of the current number of queued messages.</param>
            <returns>The time interval to wait in milliseconds.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FlowController.MessagesToDrop(System.Int32)">
            <summary>
            The number of messages to drop when QueueSize has been exceeded.
            </summary>
            <param name="currentMessageCount">The current number of messages.</param>
            <returns>The number of messages to drop.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FlowController.ShouldSendNow(System.Int32)">
            <summary>
            Determines if the queue should awaken the transmitter and start sending
            </summary>
            <param name="messageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FlowController.OkToTransmit">
            <summary>
            Determines if messages sending is currently permitted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FlowController.OnSend(System.Boolean)">
            <summary>
            Updates the flow controller based on the success or failure of a message transmission.
            </summary>
            <param name="sendSucceeded">The status of the message transmission.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FlowController.Copy">
            <summary>
            Creates a deep copy of the FlowController.
            </summary>
            <returns>A new instance of IFlowController.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IFlowController">
            <summary>
            Interface for defining a flow controller.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFlowController.BatchHasExpired(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Determines if a Batch has expired and is eligible for deletion/dropping
            </summary>
            <param name="batch">The batch to check</param>
            <returns>True if the batch should be deleted. False if it should be kept and cached</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFlowController.CanStartClient">
            <summary>
            Determines if the CoreClient instance should actually start queueing of messages
            </summary>
            <returns>True if it should start, false if not</returns>
        </member>
        <member name="P:PreEmptive.Analytics.Common.IFlowController.SupportOfflineStorage">
            <summary>
            Is offline storage of messages permitted.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.IFlowController.SendDisabled">
            <summary>
            Is the transmission of messages temporarily disabled.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.IFlowController.MaximumBatchSize">
            <summary>
            The maximum size a message batch can be, in bytes.
            If a batch exceeds this size, it is split into multiple batches
            If a single message exceeds this size, it will be discarded if transmission fails at any time
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFlowController.GetInterval(System.Int32)">
            <summary>
            Calculates the time to wait until the next automatic batching and sending of messages.
            </summary>
            <param name="numberOfMessages">A count of the current number of queued messages.</param>
            <returns>The time interval to wait in milliseconds.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFlowController.MessagesToDrop(System.Int32)">
            <summary>
            The number of messages to drop when QueueSize has been exceeded.
            </summary>
            <param name="currentMessageCount">The current number of messages.</param>
            <returns>The number of messages to drop.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFlowController.OkToTransmit">
            <summary>
            Determines if messages sending is currently permitted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFlowController.ShouldSendNow(System.Int32)">
            <summary>
            Determines if the queue should awaken the transmitter and start sending
            </summary>
            <param name="messageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFlowController.OnSend(System.Boolean)">
            <summary>
            Updates the flow controller based on the success or failure of a message transmission.
            </summary>
            <param name="sendSucceeded">The status of the message transmission.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFlowController.Copy">
            <summary>
            Creates a deep copy of the FlowController.
            </summary>
            <returns>A new instance of IFlowController.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.FeatureGroup">
            <summary>
            Class that contains information about a specific feature group.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.FeatureGroup.#ctor(System.Guid,System.String)">
            <summary>
            Constructor for a FeatureGroup.
            </summary>
            <param name="guid">A unique identifier for the feature group.</param>
            <param name="partition">The </param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FeatureGroup.UniqueId">
            <summary>
            A unique identifier for the feature group.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.FeatureGroup.PartitionId">
            <summary>
            A string used to split up groups.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IFeatureGroupDictionary">
            <summary>
            A thread-safe dictionary/stack-ish collection for storing and retrieving feature groups
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFeatureGroupDictionary.TryRemove(System.String,System.String,System.Boolean@)">
            <summary>
            Will try to lookup a value by given name and partitionid. If partition id isn't found, then
            set foundpartition to false and will just return the last feature group added by the name. If nothing is found by the name, return null
            </summary>
            <param name="name">The name of the feature.</param>
            <param name="partitionid">The ID of the partition the feature is a part of.</param>
            <param name="foundpartition">If the partition was found.</param>
            <returns>The FeatureGroup that was found.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFeatureGroupDictionary.Add(System.String,PreEmptive.Analytics.Common.FeatureGroup)">
            <summary>
            Add a feature group by the name `name`.
            </summary>
            <param name="name">Then name of the feature group.</param>
            <param name="adder">The feature group to add.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.LockingFeatureGroupDictionary">
            <summary>
            A locking dictionary used for managing FeatureGroups.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.LockingFeatureGroupDictionary.Groups">
            <summary>
            The groups of messages.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.LockingFeatureGroupDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{PreEmptive.Analytics.Common.FeatureGroup}})">
            <summary>
            Constructor for the LockingFeatureGroupDictionary.
            </summary>
            <param name="groups">An optional IDictionary to manage groups.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.LockingFeatureGroupDictionary.TryRemove(System.String,System.String,System.Boolean@)">
            <summary>
            Will try to lookup a value by given name and partitionid. If partition id isn't found, then
            set foundpartition to false and will just return the last feature group added by the name. If nothing is found by the name, return null.
            </summary>
            <param name="name">The name of the feature.</param>
            <param name="partitionid">The ID of the partition the feature is a part of.</param>
            <param name="foundpartition">If the partition was found.</param>
            <returns>The FeatureGroup that was found.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.LockingFeatureGroupDictionary.Add(System.String,PreEmptive.Analytics.Common.FeatureGroup)">
            <summary>
            Add a feature group by the name `name`.
            </summary>
            <param name="name">Then name of the feature group.</param>
            <param name="adder">The feature group to add.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.LockingFeatureGroupDictionary.GetOrAdd(System.String)">
            <summary>
            Gets an existing list of FeatureGroup or creates a new list associated with the provided name.
            </summary>
            <param name="name">The name used to map to a list of FeatureGroup.</param>
            <returns></returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.LockingFeatureGroupDictionary.Get(System.String)">
            <summary>
            Gets an existing list of FeatureGroup with the provided name.
            </summary>
            <param name="name">The name used to map to a list of FeatureGroup.</param>
            <returns></returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IFeaturePartitioner">
            <summary>
            Interface used for defining a way to partition features.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IFeaturePartitioner.GetPartition">
            <summary>
            Retrieves a partition.
            </summary>
            <returns>The found partition.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ThreadFeaturePartitioner">
            <summary>
            Class used for handling feature partitions.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ThreadFeaturePartitioner.GetPartition">
            <summary>
            Retrieves a partition.
            </summary>
            <returns>The found partition.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IMessageQueue">
            <summary>
            Interface that defines members necessary for a message queue.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.IMessageQueue.Stopped">
            <summary>
            If the queue has been stopped.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IMessageQueue.Start">
            <summary>
            A thread safe way to start the message queue and prepare it for accepting messages.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IMessageQueue.Stop">
            <summary>
            A thread safe way to halt the message queue.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IMessageQueue.Queue(PreEmptive.Analytics.Common.Message)">
            <summary>
            A thread safe way of adding messages.
            </summary>
            <param name="message">The message object to add.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IMessageQueue.SendDisabledChanged(System.Boolean)">
            <summary>
            A thread safe way of enabling or disabling the sending of messages.
            </summary>
            <param name="stop">Should the sending of messages be stopped.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IMessageQueue.SendMessages">
            <summary>
            A manual way to send messages that have been queued.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IOfflineDataStore">
            <summary>
            Interface for offline storage.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IOfflineDataStore.SaveBatch(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Saves off a batch of messages.
            </summary>
            <param name="messagebatch">The batch of messages to be saved.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IOfflineDataStore.GetSavedBatch">
            <summary>
            Gets the next cached MessageBatch that will be sent.
            </summary>
            <returns>The next cached MessageBatch.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IOfflineDataStore.ClearBatch(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Removest the specified message batch.
            </summary>
            <param name="messagebatch">The MessageBatch to remove.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.ISettingsStore">
            <summary>
            An interface describing a mechanism for persisting string values tied to string keys.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ISettingsStore.Item(System.String)">
            <summary>
            Gets or sets a key/value to persist. If the result is null, the key didn't exist
            If set to a value of null, the key is removed from the persistance store
            Exceptions should not normally be thrown
            </summary>
            <param name="key">The key.</param>
            <returns>The value</returns>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ISettingsStore.Count">
            <summary>
            Gets the amount of key value pairs in the store
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ISettingsStore.Keys">
            <summary>
            Gets a copy of the keys list. Any changes made to the returned list are not persisted(it's a copy!)
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ISettingsStore.MaxValueLength">
            <summary>
            The maximum permitted length of the value.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.ISettingsStore.MaxKeyLength">
            <summary>
            The maximum permitted length of the key.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.ISettingsStore.Flush">
            <summary>
            Saves the ISettingsStore data.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.MessageBatch">
            <summary>
            Class for handling groups of messages for transmission.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.MessageBatch.ID">
            <summary>
            A unique identifier for the batch.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.MessageBatch.DateCreated">
            <summary>
            The Date/Time in UTC that the message batch was initially created
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.MessageBatch.FailureCount">
            <summary>
            The number of transmission failures for this message batch
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.MessageBatch.AgentInfo">
            <summary>
            An instance of AgentInfo.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.MessageBatch.Configuration">
            <summary>
            The current instance of Configuration.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.MessageBatch.Messages">
            <summary>
            The messages that are in the batch.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageBatch.#ctor(PreEmptive.Analytics.Common.AgentInfo,PreEmptive.Analytics.Common.Configuration,System.Collections.Generic.IList{PreEmptive.Analytics.Common.Message})">
            <summary>
            Constructor for the MessageBatch.
            </summary>
            <param name="agentInfo">An instance of AgentInfo.</param>
            <param name="configuration">The current instance of Configuration.</param>
            <param name="messages">The messages that are in the batch.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageBatch.#ctor">
            <summary>
            Constructor for the MessageBatch.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageBatch.#ctor(System.Collections.Generic.IList{PreEmptive.Analytics.Common.Message})">
            <summary>
            Creates a new MessageBatch instance using the list of messages given
            </summary>
            <param name="messages">The initial list of messages to populate the batch with</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageBatch.ToString">
            <summary>
            Returns the XML representation of this MessageBatch suitable for storage or transmission
            </summary>
            <returns>The XML string</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageBatch.ToString(PreEmptive.Analytics.Common.IAttributeLimiter)">
            <summary>
            Returns the XML representation of this MessageBatch suitable for storage or transmission
            </summary>
            <param name="limiter">The field size limits of the upstream server</param>
            <returns>The XML string</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageBatch.FromString(System.String)">
            <summary>
            Creates a new MessageBatch object from an XML string.
            </summary>
            <param name="str">The string of XML to convert.</param>
            <returns>The new MessageBatch object.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IQueueProcessor">
            <summary>
            Processor of the MessageQueue
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.IQueueProcessor.Running">
            <summary>
            If the MessageQueueProcessor is currently running.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IQueueProcessor.Start">
            <summary>
            Begins the automatic processing of the message queue. (not blocking, creates it's own thread)
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IQueueProcessor.Stop">
            <summary>
            Halts the automatic processing of the message queue.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IQueueProcessor.ProcessQueueNow">
            <summary>
            Processes the queue if the message queue processor is currently running.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.MessageQueueProcessor">
            <summary>
            Class for managing the message queue.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.MessageQueueProcessor.Running">
            <summary>
            If the MessageQueueProcessor is currently running.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.MessageQueueProcessor.flowController">
            <summary>
            IFlowController that determines the behavior of the MessageQueueProcessor.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.MessageQueueProcessor.logger">
            <summary>
            The Logger instance available for debug and error messages
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.MessageQueueProcessor.AsyncProvider">
            <summary>
            The asynchronous mechanism provider
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueueProcessor.#ctor(PreEmptive.Analytics.Common.IFlowController,PreEmptive.Analytics.Common.ILogger,PreEmptive.Analytics.Common.IAsyncProvider)">
            <summary>
            Constructor for the MessageQueueProcessor.
            </summary>
            <param name="flowController">IFlowController that determines the behavior of the MessageQueueProcessor.</param>
            <param name="logger">An ILogger instance for reporting information about the message queue processor.</param>
            <param name="asyncprovider">The provider of the asynchronous execution functionality</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueueProcessor.Run">
            <summary>
            Once called, the message queue is processed until Stop is called.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueueProcessor.ProcessQueue">
            <summary>
            Signals that the queue processor should immediately stop waiting and process the queue
            If the queue is in the middle of being processed, then it will be processed once more afterwards with no delay
            If the queue is not yet running, it is processed on the current thread(ie, it blocks)
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueueProcessor.ProcessQueueBatches">
            <summary>
            Creates and sends a message batch based on what messages have been queued.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueueProcessor.Start">
            <summary>
            Begins the automatic processing of the message queue. (not blocking, creates it's own thread)
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueueProcessor.Stop">
            <summary>
            Halts the automatic processing of the message queue.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueueProcessor.ProcessQueueNow">
            <summary>
            Processes the queue if the message queue processor is currently running.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueueProcessor.ProcessBatch(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Processes a MessageBatch object.
            </summary>
            <param name="batch">The MessageBatch object to process.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueueProcessor.GetMessageBatch">
            <summary>
            Creates a message batch from informatino provided by the MessageQueueProcessor.
            </summary>
            <returns>The new MessageBatch object.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.OfflineStorageThread">
            <summary>
            Class that manages the offline storage of messages.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.OfflineStorageThread.#ctor(PreEmptive.Analytics.Common.IOfflineDataStore,PreEmptive.Analytics.Common.IFlowController,PreEmptive.Analytics.Common.IQueueTransmitter,PreEmptive.Analytics.Common.IAttributeLimiter,PreEmptive.Analytics.Common.ILogger,PreEmptive.Analytics.Common.IAsyncProvider)">
            <summary>
            Constructor for OfflineStorageThread.
            </summary>
            <param name="offlineDataStore">Interface that defines how offline messages should be stored.</param>
            <param name="flowController">Interface that defines the behaior of the message queue.</param>
            <param name="transmitterThread">TransmitterThread object that handles the sending of messages.</param>
            <param name="attributeLimiter">The field size limits of the upstream server</param>
            <param name="logger">An ILogger instance for reporting information about the offline storage thread.</param>
            <param name="asyncprovider">The provider of the asynchronous execution functionality</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.OfflineStorageThread.ProcessBatch(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Handles the transmission of a MessageBatch.
            </summary>
            <param name="batch">The MessageBatch object to process.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.OfflineStorageThread.GetMessageBatch">
            <summary>
            Retrieves a saved MessageBatch.
            </summary>
            <returns>The retrieved MessageBatch.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.OfflineStorageThread.SaveDataOffline(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Stores a MessageBatch for later transmission.
            </summary>
            <param name="batch">The MessageBatch object to save.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.CpuInfo">
            <summary>
            Infromation describing a CPU.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.CpuInfo.Speed">
            <summary>
            Current speed of the processor in MHz
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.CpuInfo.MaxSpeed">
            <summary>
            The maximum speed of the processor in MHz
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.CpuInfo.AddressWidth">
            <summary>
            The address width of the processor in bits (32 or 64 bit)
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.CpuInfo.Manufacturer">
            <summary>
            The human readable manufacturer of the processor (Intel, AMD, and friends)
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.CpuInfo.Model">
            <summary>
            The human readable model name of the processor (Core 2 Duo, Phenom, etc)
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.CpuInfo.Name">
            <summary>
            The name of the processor given to it by the OS (cpu1, etc)
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.DiskInfo">
            <summary>
            Information describing a storage device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.DiskInfo.Size">
            <summary>
            The total size of the disk in MB (1024^2 bytes)
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.DiskInfo.Free">
            <summary>
            The amount of free space on the disk in MB (1024^2 bytes)
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.DiskInfo.Name">
            <summary>
            The drive-letter or some other non-identifiable name assigned to the disk
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.DiskInfo.Filesystem">
            <summary>
            The name of the filesystem in use on the disk
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.DiskInfo.Serial">
            <summary>
            A non-identifiable serial number assigned to the volume
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.DomainInfo">
            <summary>
            Information about the domain the device is on.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.DomainInfo.MemberOf">
            <summary>
            True if this computer belongs to a domain
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.DomainInfo.Name">
            <summary>
            The name of the domain
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.DomainInfo.Role">
            <summary>
            The role this computer plays in the domain, ex. standalone workstation, domain controller, etc
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.MemoryInfo">
            <summary>
            Information about the memory on the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.MemoryInfo.Total">
            <summary>
            The total amount of memory in the system in Megabytes
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.MemoryInfo.Speed">
            <summary>
            The speed of the RAM in nanoseconds, whatever you think that means. (lower is faster)
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.MemoryInfo.Capacity">
            <summary>
            The amount of memory available to the operating system in Megabytes
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.ModemInfo">
            <summary>
            Information about the modem used by the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.ModemInfo.Model">
            <summary>
            The model of the modem in human readable form
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.ModemInfo.Type">
            <summary>
            The type of modem the device is, ex. "Null Model", "External Modem", etc
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.NetworkInfo">
            <summary>
            Information about the networkt the device is connected to.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.NetworkInfo.Speed">
            <summary>
            The current bandwidth of the connection in Mb/sec
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.NetworkInfo.MaxSpeed">
            <summary>
            The maximum possible speed of the connection in MB/sec
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.NetworkInfo.UsesDhcp">
            <summary>
            If the connection was configured using DHCP
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.NetworkInfo.IpAddress">
            <summary>
            The first IP associatedwith the connection. Can be either IPv4 or IPv6
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.NetworkInfo.MacAddress">
            <summary>
            The MAC address of the network interface. Currently there is no restrictions on the format of this
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.NetworkInfo.Name">
            <summary>
            The name of the network connection given by the operating system ("Local Area Connection 1", etc)
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.PageFileInfo">
            <summary>
            Page file info for the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.PageFileInfo.InitialSize">
            <summary>
            The initial size of the page file in MB
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.PageFileInfo.MaxSize">
            <summary>
            The maximum size of the page file in MB
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.PageFileInfo.Name">
            <summary>
            The (optional) name given to the page file by the operating system
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.ScreenInfo">
            <summary>
            Screen information for the device.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.ScreenInfo.Name">
            <summary>
            The (optional) name given to the screen by the OS
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.ScreenInfo.Width">
            <summary>
            The width of the display area in pixels
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.ScreenInfo.Height">
            <summary>
            The height of the display area in pixels
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.ScreenInfo.RefreshRate">
            <summary>
            The rate at which the display will refresh in Hz
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.SoundInfo">
            <summary>
            Information about the device's sound card.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.SoundInfo.Model">
            <summary>
            The model of the sound card in human readable form
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.SoundInfo.Manufacturer">
            <summary>
            The manufacturer of the sound card in human readable form
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.TerminalServicesInfo">
            <summary>
            Information about the terminal service the application is running on.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.TerminalServicesInfo.ConnectionsAllowed">
            <summary>
            True if new connections to the server is allowed. False if the server is maxed out in the number of users it can serve
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.TerminalServicesInfo.Mode">
            <summary>
            The mode of the terminal services server
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.TerminalServicesInfo.Licensing">
            <summary>
            The name of the licensing mode of the terminal server, ex. "per user", "per seat", etc
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.TerminalServicesMode">
            <summary>
            Enum used to describe the mode of the terminal service.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.TerminalServicesMode.RemoteAdministration">
            <summary>
            "The server the application is running on is accessed via the small number of administrative remote
            desktop sessions available to a server operating system"
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.TerminalServicesMode.ActualApplicationServer">
            <summary>
            "The application is running on an actual application server installation"
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.TimeInfo">
            <summary>
            Information about the time zone the device is located in.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.TimeInfo.Zone">
            <summary>
            Amount of time in minutes the system is offset from UTC
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.TimeInfo.DaylightSavingsInEffect">
            <summary>
            True if daylight savings is currently in effect for this machine
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.SystemProfileInfo.VideoInfo">
            <summary>
            Information about the device's video card.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.VideoInfo.Name">
            <summary>
            The (optional) name of the video card given to it by the OS
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.VideoInfo.Driver">
            <summary>
            The driver used by the video card
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.VideoInfo.Memory">
            <summary>
            The amount of memory available to the card in MB
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.SystemProfileInfo.VideoInfo.Colors">
            <summary>
            The amount of colors the card can display
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.AppComponentTag">
            <summary>
            Class that describes a component making up an application (e.g. a .dll).
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.AppComponentTag.TagName">
            <summary>
            Name of the application component tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.AppComponentTag.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for creating the AppComponentTag.
            </summary>
            <param name="name">The name of the component.</param>
            <param name="version">The version of the component.</param>
            <param name="fullname">The full name of the assembly which is also known as the display name.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.BinaryInfoTag">
            <summary>
            Class for creating a binary information tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.BinaryInfoTag.#ctor(System.Nullable{System.Guid},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for creating a binary information tag.
            </summary>
            <param name="id">A Guid that uniquely identifies the binary information.</param>
            <param name="modified">When the binary information was last modified.</param>
            <param name="name">A name for the binary information.</param>
            <param name="version">A version indicator for the binary information.</param>
            <param name="classname">The name of the originating class for the binary information.</param>
            <param name="methodname">The name of the originating method for the binary information.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.BinaryInfoTag.#ctor(PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Constructor for creating a binary information tag.
            </summary>
            <param name="info">An instance of BinaryInfo that contains information used for populating the BinaryInfoTag.</param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.BinaryInfoTag.TagName">
            <summary>
            Name of the binary information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.BinaryInfoTag.ID">
            <summary>
            A Guid that uniquely identifies the binary information.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.BinaryInfoTag.LastModified">
            <summary>
            When the binary information was last modified.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.BinaryInfoTag.Name">
            <summary>
            A name for the binary information.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.BinaryInfoTag.Version">
            <summary>
            A version indicator for the binary information.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.BinaryInfoTag.ClassName">
            <summary>
            The name of the originating class for the binary information.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.BinaryInfoTag.MethodName">
            <summary>
            The name of the originating method for the binary information.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.Feature">
            <summary>
            A general base class for the various different Feature messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.Feature.Name">
            <summary>
            Name of the feature
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Feature.#ctor(System.String,System.Guid,System.String,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag,System.Nullable{System.Guid})">
            <summary>
            Constructor for a feature message.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="eventtype">A string representing the type of feature message.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
            <param name="group">A Guid representing the group the messages belong to.</param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.Feature.TagName">
            <summary>
            Name of the tag for the feature message.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.FeatureTick">
            <summary>
            Class for creating feature tick messages.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.FeatureTick.#ctor(System.String,System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for a feature tick message.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.FeatureTick.TagDescription">
            <summary>
            A more descriptive name for feature tick.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.ApplicationTag">
            <summary>
            Class that describes an application.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.ApplicationTag.TagName">
            <summary>
            Name of the application tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.ApplicationTag.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for creating the ApplicationTag.
            </summary>
            <param name="applicationId">A string that uniquely identifies the application.</param>
            <param name="applicationName">A name that identifies the application.</param>
            <param name="applicationVersion">The version of the application</param>
            <param name="applicationType">A string that describes the type of the application.</param>
            <param name="applicationInstanceId">A string that identifies the current instance of the application.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.Attribute">
            <summary>
            A struct used to hold information for attributes that appear int message tags.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Tags.Attribute.Name">
            <summary>
            The attribute's name.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Tags.Attribute.Value">
            <summary>
            The attribute's value.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Attribute.#ctor(System.String,System.String)">
            <summary>
            A constructor for the attribute.
            </summary>
            <param name="name">The attribute's name.</param>
            <param name="value">The attribute's value.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.CompanyTag">
            <summary>
            Class for creating a company tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.CompanyTag.TagName">
            <summary>
            Name of the company tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.CompanyTag.#ctor(System.String,System.String)">
            <summary>
            Constructor for creating a company tag.
            </summary>
            <param name="companyID">A Guid that defines the ID of the company.</param>
            <param name="companyName">The name of the company.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.ExceptionTag">
            <summary>
            Class for creating an exception tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.ExceptionTag.TagName">
            <summary>
            Name of the exception tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.ExceptionTag.#ctor(System.String,System.String)">
            <summary>
            Constructor for creating an exception tag.
            </summary>
            <param name="type">The type of exception.</param>
            <param name="message">A human readable message that describes the condition.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.ExceptionTag.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor for creating an exception tag.
            </summary>
            <param name="sequence">The sequence number for this event.</param>
            <param name="type">The type of exception.</param>
            <param name="message">A human readable message that describes the condition.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.ExtendedKeyTag">
            <summary>
            Class for creating an extended key tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.ExtendedKeyTag.TagName">
            <summary>
            Name of the extended key tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.ExtendedKeyTag.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor for creating an extended key tag.
            </summary>
            <param name="name">The name of the extended key.</param>
            <param name="value">The value of the extended key.</param>
            <param name="isNumeric">A boolean that determines if the server should process the value as numeric.</param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.ExtendedKeyTag.Name">
            <summary>
            The name of the extended key.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.ExtendedKeyTag.Value">
            <summary>
            The value of the extended key.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.HostTag">
            <summary>
            Class for creating a host information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.HostTag.TagName">
            <summary>
            Name of the host information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.HostTag.HostInfo">
            <summary>
            An instance of HostInfo that is used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.HostTag.#ctor(PreEmptive.Analytics.Common.HostInfo,PreEmptive.Analytics.Common.OSInfo,System.Boolean)">
            <summary>
            Constructor for creating a host information tag.
            </summary>
            <param name="hostInfo">An instance of HostInfo that is used to populate the tag.</param>
            <param name="osInfo">An instance of OSInfo that is used to populate the tag.</param>
            <param name="omitPII">Determines if personally identifiable information should be excluded from the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.MessagesTag">
            <summary>
            A class for creating a messages tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.MessagesTag.TagName">
            <summary>
            Name of the messages tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.MessagesTag.Messages">
            <summary>
            An IList of Messages that are contained within the messages tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.MessagesTag.#ctor(PreEmptive.Analytics.Common.Configuration,PreEmptive.Analytics.Common.AgentInfo,System.Collections.Generic.IEnumerable{PreEmptive.Analytics.Common.Message})">
            <summary>
            Constructor for creating a messages tag.
            </summary>
            <param name="configuration">A Configuration object that is used to fill the inner tag of the messages tag.</param>
            <param name="agentInfo">An AgentInfo object that is used to fill the inner tag of the messages tag.</param>
            <param name="messages">A collection of Messages that are to be contained within the messages tag.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.MessagesTag.ToString(PreEmptive.Analytics.Common.IAttributeLimiter)">
            <summary>
            Converts the current message tag to a string. 
            This also applies some size estimations to the StringBuffer used so that it avoids Large Object Heap fragmentation when possible
            </summary>
            <param name="limits">The limiter</param>
            <returns>The serialized XML string </returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.MessagesTag.AppendSerializedInnerTags(System.Text.StringBuilder,PreEmptive.Analytics.Common.IAttributeLimiter)">
            <summary>
            Convert all of the object represenations of inner tags for this messages to strings.
            </summary>
            <returns>The string representation of the inner tags.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.OSTag">
            <summary>
            Class for creating a host information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.OSTag.TagName">
            <summary>
            Name of the OS information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.OSTag.OSInfo">
            <summary>
            An instance of OSInfo that is used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.OSTag.#ctor(PreEmptive.Analytics.Common.OSInfo,System.Boolean)">
            <summary>
            Constructor for creating an OS information tag.
            </summary>
            <param name="osInfo">An instance of OSInfo that is used to populate the tag.</param>
            <param name="omitPII">Determines if personally identifiable information should be excluded from the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.PerformanceProbeTags.CpuUseTag">
            <summary>
            Class for creating the tag to describe CPU usage.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.PerformanceProbeTags.CpuUseTag.Utilization">
            <summary>
            An integer between 0 and 100 that represents the percentage of CPU utilization. A null value designates that this value has not been set.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.PerformanceProbeTags.CpuUseTag.#ctor(System.Nullable{System.Int32})">
            <summary>
            Constructor for the CPU use tag.
            </summary>
            <param name="utilization">An integer representing the percentage of CPU utilization.</param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.PerformanceProbeTags.CpuUseTag.TagName">
            <summary>
            Name of the CPU use tag.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.PerformanceProbeTags.MemoryUseTag">
            <summary>
            Class for creating the tag to describe memory usage.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.PerformanceProbeTags.MemoryUseTag.Available">
            <summary>
            The total amout of memory available on the device in megabytes.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.PerformanceProbeTags.MemoryUseTag.Used">
            <summary>
            The amount of memory used by the application in megabytes.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.PerformanceProbeTags.MemoryUseTag.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructor for the memory use tag.
            </summary>
            <param name="available">The total amout of memory available on the device in megabytes.</param>
            <param name="used">The amount of memory used by the application in megabytes.</param>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.PerformanceProbeTags.MemoryUseTag.TagName">
            <summary>
            Name of the memory use tag.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.StackTag">
            <summary>
            Class for creating a host information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.StackTag.TagName">
            <summary>
            Name of the stack information tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.StackTag.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for creating a stack information tag.
            </summary>
            <param name="sequence">The sequence number for this element.</param>
            <param name="type">The class that generated the exception.</param>
            <param name="method">The method that generated the exception.</param>
            <param name="signature">The signature that generaged the exception. This is an optional attribute.</param>
            <param name="file">The source code file for the class that generated the exception. This is an option attribute.</param>
            <param name="line">The line number in the source code where the exception was generated. This is an optional attribute.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.CpuInfoTag">
            <summary>
            Class for creating the tag that describes a CPU.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.CpuInfoTag.TagName">
            <summary>
            Name of the CPU information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.CpuInfoTag.Cpu">
            <summary>
            The instance of CpuInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.CpuInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.CpuInfo)">
            <summary>
            Constructor for creating the CpuInfoTag.
            </summary>
            <param name="cpu">The instance of CpuInfo used to populate the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.DiskInfoTag">
            <summary>
            Class for creating the tag that describes a storage device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.DiskInfoTag.TagName">
            <summary>
            Name of the disk information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.DiskInfoTag.Disk">
            <summary>
            The instance of DiskInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.DiskInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.DiskInfo)">
            <summary>
            Constructor for creating the DiskInfoTag.
            </summary>
            <param name="disk">The instance of DiskInfo used to populate the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.DomainInfoTag">
            <summary>
            Class for creating the tag that describes domain information for the device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.DomainInfoTag.TagName">
            <summary>
            Name of the domain information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.DomainInfoTag.Domain">
            <summary>
            The instance of DomainInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.DomainInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.DomainInfo,System.Boolean)">
            <summary>
            Constructor for creating the DomainInfoTag.
            </summary>
            <param name="domain">The instance of DomainInfo used to populate the tag.</param>
            <param name="omitpii">Determines if personally identifiable information should be excluded from the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.MemoryInfoTag">
            <summary>
            Class for creating the tag that describes the memory on a device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.MemoryInfoTag.TagName">
            <summary>
            Name of the memory information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.MemoryInfoTag.Memory">
            <summary>
            The instance of MemoryInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.MemoryInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.MemoryInfo)">
            <summary>
            Constructor for creating the MemoryInfoTag.
            </summary>
            <param name="memory">The instance of MemoryInfo used to populate the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.ModemInfoTag">
            <summary>
            Class for creating the tag that describes the modem used by the device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.ModemInfoTag.TagName">
            <summary>
            Name of the modem information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.ModemInfoTag.Modem">
            <summary>
            The instance of ModemInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.ModemInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.ModemInfo)">
            <summary>
            Constructor for creating the ModemInfoTag.
            </summary>
            <param name="modem">The instance of ModemInfo used to populate the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.NetworkInfoTag">
            <summary>
            Class for creating the tag that describes the network used by the device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.NetworkInfoTag.TagName">
            <summary>
            Name of the network information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.NetworkInfoTag.Network">
            <summary>
            The instance of NetworkInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.NetworkInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.NetworkInfo,System.Boolean)">
            <summary>
            Constructor for creating the NetworkInfoTag.
            </summary>
            <param name="network">The instance of NetworkInfo used to populate the tag.</param>
            <param name="omitpii">Determines if personally identifiable information should be excluded from the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.PageFileInfoTag">
            <summary>
            Class for creating the tag that describes the page file used by the device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.PageFileInfoTag.TagName">
            <summary>
            Name of the page file information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.PageFileInfoTag.PageFile">
            <summary>
            The instance of PageFileInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.PageFileInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.PageFileInfo)">
            <summary>
            Constructor for creating the PageFileInfoTag.
            </summary>
            <param name="pagefile">The instance of PageFileInfo used to populate the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.ScreenInfoTag">
            <summary>
            Class for creating the tag that describes the screen used by the device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.ScreenInfoTag.TagName">
            <summary>
            Name of the screen information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.ScreenInfoTag.Screen">
            <summary>
            The instance of ScreenInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.ScreenInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.ScreenInfo)">
            <summary>
            Constructor for creating the ScreenInfoTag.
            </summary>
            <param name="screen">The instance of ScreenInfo used to populate the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.SoundInfoTag">
            <summary>
            Class for creating the tag that describes the sound card used by the device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.SoundInfoTag.TagName">
            <summary>
            Name of the sound information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.SoundInfoTag.Sound">
            <summary>
            The instance of SoundInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.SoundInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.SoundInfo)">
            <summary>
            Constructor for creating the SoundInfoTag.
            </summary>
            <param name="sound">The instance of SoundInfo used to populate the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.TerminalServicesInfoTag">
            <summary>
            Class for creating the tag that describes the terminal service used by the device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.TerminalServicesInfoTag.TagName">
            <summary>
            Name of the terminal services information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.TerminalServicesInfoTag.TerminalServices">
            <summary>
            The instance of TerminalServicesInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.TerminalServicesInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.TerminalServicesInfo)">
            <summary>
            Constructor for creating the TerminalServicesInfoTag.
            </summary>
            <param name="info">The instance of TerminalServicesInfo used to populate the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.TimeInfoTag">
            <summary>
            Class for creating the tag that describes the time zone information for the device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.TimeInfoTag.TagName">
            <summary>
            Name of the time information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.TimeInfoTag.TimeZone">
            <summary>
            The instance of TimeInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.TimeInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.TimeInfo)">
            <summary>
            Constructor for creating the TimeInfoTag.
            </summary>
            <param name="timezone">The instance of TimeInfo used to populate the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.SystemProfileTags.VideoInfoTag">
            <summary>
            Class for creating the tag that describes the video card information for the device.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.VideoInfoTag.TagName">
            <summary>
            Name of the video information tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.SystemProfileTags.VideoInfoTag.Video">
            <summary>
            The instance of VideoInfo used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.SystemProfileTags.VideoInfoTag.#ctor(PreEmptive.Analytics.Common.SystemProfileInfo.VideoInfo)">
            <summary>
            Constructor for creating the VideoInfoTag.
            </summary>
            <param name="video">The instance of VideoInfo used to populate the tag.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.AttributeList">
            <summary>
            Class that holds attributes for a Tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.AttributeList.Item(System.String)">
            <summary>
            Retrieve the attribute object by name.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute object that matches the parameter. If no match is found, null is returned.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.Tag">
            <summary>
            Class for creating an XML Tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.Tag.TagName">
            <summary>
            The name of the tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.Tag.TagDescription">
            <summary>
            A more descriptive tag name.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Tags.Tag.Attributes">
            <summary>
            The list of attributes that will be added to the Tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.Tag.InnerTags">
            <summary>
            A list of tags that are nested within this tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.#ctor">
            <summary>
            Constructor for creating a Tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.#ctor(System.String)">
            <summary>
            Constructor for creating a Tag.
            </summary>
            <param name="tagName">The name of the Tag.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.ToString(PreEmptive.Analytics.Common.IAttributeLimiter)">
            <summary>
            Converts the Tag object to an XML string.
            </summary>
            <param name="limits">AttributeLimiter for limiting the size of attributes</param>
            <returns>The XML string representing the Tag object.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.ToString">
            <summary>
            Converts the Tag object to an XML string.
            </summary>
            <returns>The XML string representing the Tag object.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.AppendToStringBuilder(System.Text.StringBuilder,PreEmptive.Analytics.Common.IAttributeLimiter)">
            <summary>
            Serializes the tag to a string appending directly onto the passed in StringBuilder
            </summary>
            <param name="sb">The StringBuilder to serialize to</param>
            <param name="limits">The field size limits of the upsteam server</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.FromString(System.String)">
            <summary>
            Creates a Tag object from an XML string.
            </summary>
            <param name="str">The XML string that is converted into a Tag object.</param>
            <returns>The Tag object that was created from the provided XML string, or null if there was an error</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.FromReader(System.IO.TextReader)">
            <summary>
            Creates (deserializes) a Tag object from an XML string provided by a TextReader
            </summary>
            <param name="reader">The TextReader with the XML string content. </param>
            <returns>The tag object that was created, or null if there was an error</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.AppendSerializedInnerTags(System.Text.StringBuilder,PreEmptive.Analytics.Common.IAttributeLimiter)">
            <summary>
            Will serialize the inner tags and return them as a string
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.AddAttribute(System.String,System.String)">
            <summary>
            Adds an attribute to the current Tag.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.AddOptionalAttribute(System.String,System.String)">
            <summary>
            Adds an optional attribute to the current Tag. If the value provided is null, then the attribute will not be added.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.AppendEscape(System.Text.StringBuilder,System.String,System.Nullable{System.Int32})">
            <summary>
            Esxapes the characters in the given string and appends the escaped text to the provided StringBuilder
            </summary>
            <param name="sb">The StringBuilder to append escaped text to</param>
            <param name="maxLength">Maximum amount of characters to append. (may not be exact!)</param>
            <param name="s">The source text that must be escaped</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.Escape(System.String,System.Nullable{System.Int32})">
            <summary>
            Escapes characters from the given string
            </summary>
            <param name="s">The string to escape.</param>
            <param name="maxLength">Maximum amount of characters to process (may not be exact!)</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.AddOptionalAttribute``1(System.String,``0)">
            <summary>
            Add an optional attribute to the current tag. If the value provided is null, then the attribute will not be added.
            </summary>
            <typeparam name="T">The type of the attribute's value.</typeparam>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.Tag.MapToString``1(``0)">
            <summary>
            Converts a generic value into its string representation.
            </summary>
            <typeparam name="T">The type of the value to be converted.</typeparam>
            <param name="value">The value to be represented as a string.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Tags.UserTag">
            <summary>
            Class for creating a user tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.UserTag.TagName">
            <summary>
            Name of the user tag.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Tags.UserTag.UserInfo">
            <summary>
            An instance of UserInfo that is used to populate the tag.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Tags.UserTag.#ctor(PreEmptive.Analytics.Common.UserInfo,System.Boolean,System.String)">
            <summary>
            Constructor for creating a user information tag.
            </summary>
            <param name="userInfo">An instance of UserInfo that is used to populate the tag.</param>
            <param name="omitPII">Determines if personally identifiable information should be excluded from the tag.</param>
            <param name="fallbackName">Non-identifiable user name to use if omitPII is true. Generates a random GUID if not specified.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.AgentInfo">
            <summary>
            Class used to describe the Client being used.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.AgentInfo.Name">
            <summary>
            Name of the Client.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.AgentInfo.Version">
            <summary>
            Version of the Client.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.AgentInfo.AdditionalInfo">
            <summary>
            Additional information describing the Client.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.CoreClient">
            <summary>
            Class that handles all of the common functionality for the Client.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.CoreClient.InstanceIdKey">
            <summary>
            Value used to retrieve the instance ID.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.CoreClient.GeneratedUserNameKey">
            <summary>
            The key to retrieve the generated user name.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.CoreClient.FlowController">
            <summary>
            A FlowController instance used to define the Client's interaction with the server.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.CoreClient.Platform">
            <summary>
            Platform specific implementations of methods.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.CoreClient.Logger">
            <summary>
            The current Logger instance being used
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.CoreClient.AppStarted">
            <summary>
            If the Client has been started.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.CoreClient.MessageQueue">
            <summary>
            The MessageQueue instance that handles the queueing and sending of messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.CoreClient.Configuration">
            <summary>
            The instance of Configuration that defines the behavior of the Client.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.CoreClient.Correlator">
            <summary>
            The instance of a FeatureCorrelator that is used by the Client.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.CoreClient.SessionExtensionTimer">
            <summary>
            Used for session extension
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.CoreClient.SettingsStore">
            <summary>
            The instance of ISettingsStore that is used by the Client.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.#ctor(PreEmptive.Analytics.Common.IPlatform,PreEmptive.Analytics.Common.ILogger)">
            <summary>
            The constructor for the Client.
            </summary>
            <param name="platform">The instance of an IPlatform object that is used to create the Client object.</param>
            <param name="logger">ILogger instance that determines how logging is done.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.GetActiveDefaultSession">
            <summary>
            Gets the Session ID that is being used for the current API run. This ID can be passed to other APIs to activate subordinate mode.
            </summary>
            <returns>The Session ID</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.ApplicationStart(PreEmptive.Analytics.Common.Configuration,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,PreEmptive.Analytics.Common.IFlowController)">
            <summary>
             Starts the PreEmptive Analytics client.
             </summary>
             <remarks>
             Before the client system has been started any attempts to send messages of any type are ignored.
             If the client system is running, i.e. ApplicationStart() has previously been called and ApplicationStop() not yet called, 
             then the start request is ignored.
             </remarks>
             <param name="configuration">A non-null Configuration instance used to define the configuration of the Client. Minimally the ApplicationID and CompanyID properties must be set.</param>
             <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
             <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
             <param name="flowController">An optional FlowController instance used to define the Client's interaction with the server.</param>
              <returns>true if the request was accepted and the PA Client is now running</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.DoApplicationStart(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Starts the Client and queues an ApplicationStart and a SessionStart message.
            </summary>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.GetHostTag">
            <summary>
            Creates a HostTag based on the given platform.
            </summary>
            <returns>The newly created HostTag.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.GetUserTag">
            <summary>
            Creates a UserTag based on the given platform and configuration.
            </summary>
            <returns>The newly created UserTag.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.Initialize">
            <summary>
            Used to initialize the Client object.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.ApplicationStop(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,System.Boolean,System.Boolean)">
            <summary>
            Stops the PreEmptive Analytics client.
            </summary>
            <remarks>
            This method halts the client system and releases all connections and resources used by it.
            To continue interaction with the client system ApplicationStart() will need to be called again: all other requests to the Client will be ignored. 
            If the client system is not currently running then the request is ignored.
            </remarks>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="synchronous">Should stopping be done synchrounsly?</param>
            <param name="immediate">Actually stop the instance, rather than trigger the session extension timer(if configured)</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.DoApplicationStop(PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.BinaryInfo,System.Boolean,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Stops the Client and queues an ApplicationStop and a SessionStop message.
            </summary>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="synchronous">Should stopping be done synchrounsly?</param>
            <param name="timeout">The absolute timeout for the stop operation. Leave null to pull the value from Configuration</param>
            <param name="immediate">Actually stop the instance, rather than trigger the session extension timer</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.FeatureTick(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing the occurrence of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.FeatureTick(System.String,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing the occurrence of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.FeatureStart(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo,System.Nullable{System.Guid})">
            <summary>
            Sends a message representing the start of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="group">A Guid representing the message group.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.FeatureStop(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo,System.Nullable{System.Guid})">
            <summary>
            Sends a message representing the stop of a feature.
            </summary>
            <param name="name">A unique name for the feature.</param>
            <param name="group">A Guid representing the message group.</param>
            <param name="keys">An optional ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.ReportException(PreEmptive.Analytics.Common.ExceptionInfo,System.Boolean,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message representing an exception.
            </summary>
            <param name="exceptionInfo">An instance of ExceptionInfo that holds information that populates the exception message.</param>
            <param name="optinOverride">Determines if the currently configured OptIn setting should be ignored.</param>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.ReportTamper(PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo,PreEmptive.Analytics.Common.Configuration)">
            <summary>
            Sends a message reporting a tampering of the application.
            </summary>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="config">The Configuration instance to use to start the API</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.ReportExpiration(System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message reporting that the application's license has expired.
            </summary>
            <param name="slid">The shelflife ID of the application</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.ReportExpirationWarning(System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message reporting that the user has been warned that the application's license is close to expiration
            </summary>
            <param name="slid">The shelflife ID of the application</param>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.SystemProfile(PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a system profile message.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.PerformanceProbe(System.String,PreEmptive.Analytics.Common.ExtendedKeys,System.Nullable{System.Guid},PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Sends a message describing the performance of the device and the applicaion.
            </summary>
            <param name="name">A name that describes the point at which the performance probe is performend. The name must not be null or empty.</param>
            <param name="keys">An ExtendedKeys instance used to send additional information to the server.</param>
            <param name="binary">An optional BinaryInfo instance used to send additional information about the caller of the method to the server.</param>
            <param name="session">A Guid defining the session for the Client.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.GetBinaryTag(PreEmptive.Analytics.Common.BinaryInfo)">
            <summary>
            Helper method to check for null before converting BinaryInfo to a BinaryInfoTag.
            </summary>
            <param name="binary">The BinaryInfo instance to convert to a tag.</param>
            <returns>The tag created from a BinaryInfo tag.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.SendMessages">
            <summary>
            Signals the Client to send all of the messages that are currently in the queue.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.SetSendDisabled(System.Boolean)">
            <summary>
            Disables or enables the sending of messages for the currently running Client.
            </summary>
            <param name="value">Whether or not the sending of messages should be disabled.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.CoreClient.SetSessionOptIn(System.Boolean,PreEmptive.Analytics.Common.Configuration)">
            <summary>
            Enables or disables the optIn setting for the currently running Client.
            </summary>
            <param name="value">The value to set optIn to.</param>
            <param name="config">If the opt-in value is true and the API isn't started, use this configuration object to start the client</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Configuration">
            <summary>
            The configuration for a PAClient to use
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.CompanyID">
            <summary>
            A Guid that uniquely identifies the company.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.CompanyName">
            <summary>
            The name of the company.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.ApplicationID">
            <summary>
            A Guid that uniquely identifies the application.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.ApplicationType">
            <summary>
            A user defined application type.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.ApplicationName">
            <summary>
            The name of the application.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.ApplicationVersion">
            <summary>
            The version of the application.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.InstanceID">
            <summary>
            An identifier for the instance of the application.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Configuration.InstanceIdUserSet">
            <summary>
            Indicates if InstanceID was set by the user.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Configuration.GeneratedUserName">
            <summary>
            Stores the generated user name.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.OptIn">
            <summary>
            A boolean that determines if the Client is permitted to send any information.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.DefaultSession">
            <summary>
            A Guid representing the session that is used if the user has not provided one.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.MessageGroup">
            <summary>
            A Guid that uniquely defines a group that the messages belong to.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.Capabilities">
            <summary>
            A list of features supported by the API that will be sent in the X-RI-Capabilities header for use by the server.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.Endpoint">
            <summary>
            The endpoint to send the messages to.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.UseSSL">
            <summary>
            Should SSL encryption be used when sending messages.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.SupportOfflineStorage">
            <summary>
            Should messages be saved offline when they cannot be sent.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.MinimumFailureCount">
            <summary>
            The minimum amount of times a message should fail to be transmitted
            before becoming eligible for deletion from offline storage
            This is used to populate the default flow controller
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.MinimumTimeToLive">
            <summary>
            The minimum age(in seconds) a message must be before it becomes eligible for deletion
            from offline storage
            This is used to populate the default flow controller
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.Offline">
            <summary>
            Is the transmission of messages prohibited.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.OmitPersonalInfo">
            <summary>
            If set to true will scrub all personally identifiable information
            Includes things like: Username, host IP, host name, etc
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.FullData">
            <summary>
            This controls how "deep" Platform.GetSystemInfo is allowed to go. If true, it may take longer
            to read some information. If set to false, it'll skip getting information that is considered slow
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.MaximumBatchSize">
            <summary>
            The maximum size a message batch can be, in bytes.
            If a batch exceeds this size, it is split into multiple batches
            If a single message exceeds this size, it will be discarded if transmission fails at any time
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.AttributeLimiter">
            <summary>
            The field size limits of the server pointed to by Endpoint
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Configuration.StopBehavior">
            <summary>
            Defines the behavior when an ApplicationStop is called
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Configuration.ApplicationStopBehavior">
            <summary>
            The class which controls the behavior of ApplicationStop for the PAClient
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.ApplicationStopBehavior.StopTimeout">
            <summary>
            The maximum amount of time in milliseconds that ApplicationStop will block for when stopping synchronously 
            If something goes wrong and it takes longer than this, then the method will return even if a batch of messages could be lost. 
            If set to null, the value will be set to the most useful value for the current platform
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.ApplicationStopBehavior.NeededTimeForSavingAtStop">
            <summary>
            The amount of time in milliseconds that should be dedicated to saving all unsent messages to offline storage at ApplicationStop
            If set to null, the value will be set to the most useful value for the current platform
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.ApplicationStopBehavior.SessionExtensionWindow">
            <summary>
            This allows a session to be "extended" whenever an application start is called soon after an application stop. 
            For example in mobile applications when the user switches screens or is briefly interrupted.
            The value, in milliseconds, indicates the amount of time allowed before an app-stop is actually executed.
            A value of 0 disables this feature.
            If set to null, the value will be set to the most useful value for the current platform
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Configuration.ApplicationStopBehavior.DefaultsToSynchronousStop">
            <summary>
            If set to true, then when doing ApplicationStop(), the method will translate to ApplicationStopSync, else it will default to ApplicationStopAsync
            If set to null, the value will be set to the most useful value for the current platform
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Configuration.ApplicationStopBehavior.Copy">
            <summary>
            Makes a deep copy of the current object
            </summary>
            <returns>Returns a copy of this object</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Configuration.#ctor">
            <summary>
            Constuctor for a Configuration object.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Configuration.#ctor(System.Guid,System.Guid)">
            <summary>
            Constuctor for a Configuration object.
            </summary>
            <param name="companyID">A Guid that uniquely identifies the company.</param>
            <param name="applicationID">A Guid tht uniquely identifies the application.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Configuration.#ctor(System.String,System.String)">
            <summary>
            Constuctor for a Configuration object.
            </summary>
            <param name="companyID">A Guid in string form that uniquely identifies the company.</param>
            <param name="applicationID">A Guid in string form that uniquely identifies the application.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Configuration.GetFullEndpointURI">
            <summary>
            Returns the endpoing URI based on the UseSSL setting.
            </summary>
            <returns>The endpoint URI.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Configuration.Copy">
            <summary>
            Returns a deep copy of the Configuration object.
            </summary>
            <returns>The new Configuration object.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.HostInfo">
            <summary>
            Information describig the host system.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.HostInfo.Name">
            <summary>
            An MD5 hash of the name of the host system.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.HostInfo.IPAddress">
            <summary>
            IPv4 representation of the host IP address.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.HostInfo.Locale">
            <summary>
            The current locale for the host.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.HostInfo.Virtualized">
            <summary>
            Is the host system a virtual machine.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.HostInfo.SourceLangName">
            <summary>
            Name of the source language.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.HostInfo.SourceLangVersion">
            <summary>
            Version of the source language.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IXMLTransmitter">
            <summary>
            Interface for sending XML.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IXMLTransmitter.Post(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Sends data to the endpoint.
            </summary>
            <param name="headers">A list of HTTP headers which should be attached to the HTTP request</param>
            <param name="data">The data to transmit.</param>
            <returns>True if the transmission succeeded. False otherwise.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Message">
            <summary>
            Class for creating messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Message.TagName">
            <summary>
            Name of the tag for the message.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.Message.BinaryInfo">
            <summary>
            Binary info that describes the application where the request originated.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Message.#ctor(System.Guid,PreEmptive.Analytics.Common.ExtendedKeys,PreEmptive.Analytics.Common.Tags.BinaryInfoTag)">
            <summary>
            Constructor for a message.
            </summary>
            <param name="session">A Guid that identifies the current session.</param>
            <param name="keys">Extended key information to be sent with the message.</param>
            <param name="binary">Binary info that describes the application where the request originated.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Message.#ctor(System.String)">
            <summary>
            Constructor for a message.
            </summary>
            <param name="messageType">Name describing the message.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Message.FromTag(PreEmptive.Analytics.Common.Tags.Tag)">
            <summary>
            Creates a new message from a Tag object.
            </summary>
            <param name="tag">Tag to convert into a message.</param>
            <returns>Resulting message</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Message.ToString(PreEmptive.Analytics.Common.IAttributeLimiter)">
            <summary>
            Converts the message to XML suitable for storage or transmission
            Note that messages are assumed to be immutable and ToString results are cached when used with "matching" field size limits
            </summary>
            <param name="limits">The field size limits of the upstream server</param>
            <returns>The XML string</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Message.ToString">
            <summary>
            Converts the message to XML suitable for storage or transmission
            Note that messages are assumed to be immutable and ToString results are cached when used with "matching" field size limits
            </summary>
            <returns>The XML string</returns>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Message.CachedLimiter">
            <summary>
            The limiter last used and cached
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.Message.lastBuilder">
            <summary>
            A weak reference to the last string builder we appended to. 
            This is a weak reference because we don't want to keep the potentially huge string builder to be
            held up from being collected, especially when another potentially huge string builder may need that memory
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Message.AppendToStringBuilder(System.Text.StringBuilder,PreEmptive.Analytics.Common.IAttributeLimiter)">
            <summary>
            Appends the serialized XML string to a StringBuilder
            </summary>
            <param name="sb">The StringBuilder to append to</param>
            <param name="limits">The field size limits of the upstream server</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Message.InvalidateStringCache">
            <summary>
            Use this to clear the cached serialized string
            This must be used if you serialize the message and then modify the message
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.MessageQueue">
            <summary>
            Class that handles the incoming messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.MessageQueue.Messages">
            <summary>
            An IList of queued Messages.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.MessageQueue.Stopped">
            <summary>
            If the queue has been stopped.
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.MessageQueue.TransmitterThread">
            <summary>
            The transmitter thread being used by the MessageQueue
            </summary>
        </member>
        <member name="P:PreEmptive.Analytics.Common.MessageQueue.OfflineStorageThread">
            <summary>
            The offline storage thread being used by the MessageQueue
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueue.#ctor(PreEmptive.Analytics.Common.IClientToolsProvider,PreEmptive.Analytics.Common.IFlowController)">
            <summary>
            Constructor for the MessageQueue.
            </summary>
            <param name="client">The instance of the CoreClient with settings to be used by the message queue.</param>
            <param name="flowController">The IFlowController instance that determines the behavior of the message queue.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueue.Start">
            <summary>
            A thread safe way to start the message queue and prepare it for accepting messages.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueue.Stop">
            <summary>
            A thread safe way to halt the message queue.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueue.Queue(PreEmptive.Analytics.Common.Message)">
            <summary>
            A thread safe way of adding messages.
            </summary>
            <param name="message">The message object to add.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueue.SendDisabledChanged(System.Boolean)">
            <summary>
            A thread safe way of enabling or disabling the sending of messages.
            </summary>
            <param name="stop">Should the sending of messages be stopped.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueue.SendMessages">
            <summary>
            A manual way to send messages that have been queued.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueue.DequeueMessages">
            <summary>
            A thread safe way of removing messages for sending.
            </summary>
            <returns>The messages that have been removed</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.MessageQueue.PeekMessages">
            <summary>
            Makes a clone of the list holding the messages and returns the copy of the list of messages
            Unlike Dequeing, this does not consume the messages returned. 
            </summary>
            <returns>The messages currently in the queue</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IPlatform">
            <summary>
            Interface to define platform specific methods.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.CreateXMLTransmitter">
            <summary>
            Creates a platform specific IXMLTransmitter.
            </summary>
            <returns>A platform specific IXMLTransmitter</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetAgentInfo">
            <summary>
            Populates an AgentInfo object with platform specific data.
            </summary>
            <returns>The new AgentInfo object.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetHostInfo">
            <summary>
            Populates an HostInfo object with platform specific data.
            </summary>
            <returns>The new HostInfo object.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetOSInfo">
            <summary>
            Gets information about the operating system the application is running on.
            </summary>
            <returns>A new OSInfo object.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetUserInfo">
            <summary>
            Gets information about the user running the application.
            </summary>
            <returns>A new UserInfo object.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetDefaultEndpoint">
            <summary>
            Retrieves the endpoint string.
            </summary>
            <returns>The endpoint string.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetStackInfo(System.Exception)">
            <summary>
            Parses the stack information from the provided exception.
            </summary>
            <param name="exception">The Exception object.</param>
            <returns>The parsed stack information.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetComponentInfo">
            <summary>
            Retrieves information about the components that make up the application.
            </summary>
            <returns>A list of information about the components.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetSettingsStore">
            <summary>
            Retrieves the interface describing a mechanism for persisting string values tied to string keys.
            </summary>
            <returns>The interface describing a mechanism for persisting string values tied to string keys.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetSystemInfo(System.Boolean)">
            <summary>
            Retrieves information about they system the application is running on.
            </summary>
            <param name="fulldata">Determines if information that takes significant time to gather should be included.</param>
            <returns>The retrieved information about the system.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetPerformanceInfo(System.Boolean)">
            <summary>
            Retrieves performance information about the application.
            </summary>
            <param name="fulldata">Determines if information that takes significant time to gather should be included.</param>
            <returns>The retrieved information about the application.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetOfflineDataStore">
            <summary>
            Retrieves the OfflineDataStore that defines how offline messages should be handled on the given platform.
            </summary>
            <returns>The object defining how to handle offline data.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IPlatform.GetStopBehaviorDefaults">
            <summary>
            Gets the default ApplicationStopBehavior values appropriate for the platform
            Implementors can just forward this to PlatformClient.CoreDefaultStopBehavior() if no particular stop behavior is needed.
            </summary>
            <returns>The stop behavior defaults for this platform</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.IAsyncProvider">
            <summary>
            An asynchronous mechanism provider
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.IAsyncProvider.ExecuteAsyncIfSupported(System.Action,System.Boolean)">
            <summary>
            Execute `action` asynchronously on another thread.
            This should create a new thread, not use the ThreadPool unless there are no other options. 
            The API makes use of both ThreadPool and this method. 
            This method is used when a long-running thread will be started, or the thread needs to be started as quickly as possible and/or with higher priority
            </summary>
            <param name="action">The action to execute asynchronously</param>
            <param name="highPriority">If the thread should be considered high-priority or not. If it's not high-priority, it can be considered "below normal" priority</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.OSInfo">
            <summary>
            Information describing the operating system.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.OSInfo.Name">
            <summary>
            Name of the operating system.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.OSInfo.ServicePackVersionMajor">
            <summary>
            Major version of the operating system's service pack.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.OSInfo.ServicePackVersionMinor">
            <summary>
            Minor version of the operating system's service pack.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.OSInfo.InstallDate">
            <summary>
            ISO date representation of the install date of the operating system.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.OSInfo.ProductCode">
            <summary>
            The operating system's product code.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.OSInfo.Language">
            <summary>
            The specialized human language version of the operating system, if it supports such a concept.
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.UserInfo">
            <summary>
            Information to describe the user.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.UserInfo.HashedName">
            <summary>
            A hashed name that is used to uniquely identify the user.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.UserInfo.IsAdmin">
            <summary>
            Describes if the user has administrator/super-user rights.
            Can be true, false, or do-not-send(null)
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.UserInfo.InstanceID">
            <summary>
            A string that represents the the current instance of the user's ID.
            Note: this will be populated by Common/Platform later and does not need to be populated by the Platform.GetUserInfo
            </summary>
        </member>
        <member name="T:PreEmptive.Analytics.Common.StackInfo">
            <summary>
            Struct for storing stack trace information.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.StackInfo.Sequence">
            <summary>
            The sequence number for this element.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.StackInfo.Type">
            <summary>
            The class that generated the exception.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.StackInfo.Method">
            <summary>
            The method that generated the exception.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.StackInfo.Signature">
            <summary>
            The signature that generaged the exception. This is an optional attribute.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.StackInfo.File">
            <summary>
            The source code file for the class that generated the exception. This is an option attribute.
            </summary>
        </member>
        <member name="F:PreEmptive.Analytics.Common.StackInfo.Line">
            <summary>
            The line number in the source code where the exception was generated. This is an optional attribute.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.StackInfo.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for StackInfo.
            </summary>
            <param name="sequence">The sequence number for this element.</param>
            <param name="type">The class that generated the exception.</param>
            <param name="method">The method that generated the exception.</param>
            <param name="signature">The signature that generaged the exception. This is an optional attribute.</param>
            <param name="file">The source code file for the class that generated the exception. This is an option attribute.</param>
            <param name="line">The line number in the source code where the exception was generated. This is an optional attribute.</param>
        </member>
        <member name="T:PreEmptive.Analytics.Common.TransmitterThread">
            <summary>
            Class that handles the transmission of messages.
            </summary>
        </member>
        <member name="E:PreEmptive.Analytics.Common.TransmitterThread.TransmissionFailed">
            <summary>
            Signals that there is a need to do offline storage.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.TransmitterThread.#ctor(PreEmptive.Analytics.Common.AgentInfo,PreEmptive.Analytics.Common.IMessageDequeuer,PreEmptive.Analytics.Common.IFlowController,PreEmptive.Analytics.Common.IClientToolsProvider)">
            <summary>
            Constructor for a TransmitterThread.
            </summary>
            <param name="info">Information about the implemented Client.</param>
            <param name="dequeuer">The IMessageDequeuer interface that provides the transmitter with messages</param>
            <param name="flowController">The IFlowController interface that defines TransmitterThread's behavior.</param>
            <param name="tools">The client tools provider to be used. This provides Configuration and Logging capabilities</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.TransmitterThread.Start">
            <summary>
            Begins the automatic processing of the message queue. (not blocking, creates it's own thread)
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.TransmitterThread.ProcessBatch(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Takes a MessageBatch and either attempts to send it or store it offline based on the settings of the IFlowController.
            </summary>
            <param name="batch">The MessageBatch to process.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.TransmitterThread.SignalFailed(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Signals that the MessageBatch should be cached offline.
            </summary>
            <param name="messagebatch">The MessageBatch to cache.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.TransmitterThread.FailTransmissionsNow">
            <summary>
            Immediately interrupts all transmissions and causes them to fail. 
            If OfflineStorage is disabled, all messages are at least sent to the XMLTransmitter, but assumed to have failed.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.TransmitterThread.Transmit(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Attempts to send a MessageBatch to a server.
            </summary>
            <param name="batch">The MessageBatch to send.</param>
            <returns>If the send succeeded.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.TransmitterThread.ConstructHeaders(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            Creates the appropriate headers to be sent along with the message batch.
            </summary>
            <param name="batch">The message batch that will be sent.</param>
            <returns>The constructed headers.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.TransmitterThread.GetUserAgent(PreEmptive.Analytics.Common.AgentInfo)">
            <summary>
            Gets a formatted string based on the provided AgentInfo object.
            </summary>
            <param name="agentInfo">An AgentInfo object.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.TransmitterThread.GetMessageBatch">
            <summary>
            Creates a MessageBatch based on information in the TransmitterThread.
            </summary>
            <returns>The newly created MessageBatch.</returns>
        </member>
        <member name="T:PreEmptive.Analytics.Common.Utilities.Utils">
            <summary>
            Class containing extension methods to make our lives easier.
            </summary>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.ToISOFormat(System.DateTime)">
            <summary>
            Converts a DateTime object to a string in ISO format.
            </summary>
            <param name="dateTime">A DateTime object.</param>
            <returns>An ISO formatted string.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.Sanitize(System.String)">
            <summary>
            Trims whitespace off of the beginning and end of a string if it is not null or empty.
            </summary>
            <param name="s">The string to trim.</param>
            <returns>The trimmed string.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.SafeToString``1(System.Nullable{``0})">
            <summary>
            Calls an object's ToString method without requiring a null check.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="val">The value to convert to a string.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.OrIfEmpty(System.Nullable{System.Guid},System.Guid)">
            <summary>
            Checks to see if a Guid is empty and returns the alternate Guid if it is.
            </summary>
            <param name="guid">The Guid to check.</param>
            <param name="other">The alternate Guid.</param>
            <returns>A non empty Guid.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.ByName(System.Collections.Generic.IList{PreEmptive.Analytics.Common.Tags.Tag},System.String)">
            <summary>
            Retrieves an IList of Tags with the given name.
            </summary>
            <param name="tags">The IList of Tags to look through.</param>
            <param name="name">The tag name to look for.</param>
            <returns>The found list of tags.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.GetInstanceId(PreEmptive.Analytics.Common.IPlatform,PreEmptive.Analytics.Common.Configuration,PreEmptive.Analytics.Common.ILogger)">
            <summary>
            Retrieves the instance ID.
            </summary>
            <param name="platform">The current platform.</param>
            <param name="config">The current configuration.</param>
            <param name="logger"></param>
            <returns>The instance ID.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.GetGeneratedUserName(PreEmptive.Analytics.Common.IPlatform,PreEmptive.Analytics.Common.Configuration,PreEmptive.Analytics.Common.ILogger)">
            <summary>
            Retrieves the instance ID.
            </summary>
            <param name="platform">The current platform.</param>
            <param name="config">The current configuration.</param>
            <param name="logger">ILogger instance that determines how logging is done.</param>
            <returns>The instance ID.</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.WithTimeout(System.Action,System.Int32)">
            <summary>
            Executes a task on the threadpool with a timeout
            </summary>
            <param name="task">task to execute</param>
            <param name="duration">duration of timeout in milliseconds</param>
            <returns>true if succeeded, false if timed out</returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.ExecuteAsync(PreEmptive.Analytics.Common.IAsyncProvider,System.Action,System.Boolean)">
            <summary>
            Executes a method asynchronously. If the provider throws an error, will fall back to the threadpool
            </summary>
            <param name="platform">the provider of the asynchronous mechanism</param>
            <param name="action">the code to execute</param>
            <param name="highPriority">Is a high priority</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.ExecuteAsync``1(PreEmptive.Analytics.Common.IAsyncProvider,System.Func{``0},System.Action{``0},System.Boolean)">
            <summary>
            Executes a method asynchronously. If the provider throws an error, will fall back to the threadpool.
            </summary>
            <typeparam name="T">The return type of the action.</typeparam>
            <param name="platform">The provider of the asynchronous mechanism.</param>
            <param name="action">The code to execute.</param>
            <param name="completed">The code to execute when `action` is completed.</param>
            <param name="highPriority">Is the action a high priority.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.ExecuteSync``1(System.Func{``0},System.Action{``0})">
            <summary>
            Executes a method synchronously and catches any error that occurs.
            </summary>
            <typeparam name="T">The return type of the action.</typeparam>
            <param name="action">The code to execute.</param>
            <param name="completed">The code to execute when `action` is completed.</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.Split(PreEmptive.Analytics.Common.MessageBatch)">
            <summary>
            This will split the batch in half. If there is only one message in the batch, then it will return a list with only the single batch
            </summary>
            <param name="batch"></param>
            <returns></returns>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.LogException(PreEmptive.Analytics.Common.ILogger,System.Exception,System.String)">
            <summary>
            Will log an exception as an error
            </summary>
            <param name="logger">The logger to log to</param>
            <param name="e">The exception</param>
            <param name="prefix">The prefix message to include in the log message</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.LogExceptionWarning(PreEmptive.Analytics.Common.ILogger,System.Exception,System.String)">
            <summary>
            Will log an exception as a warning
            </summary>
            <param name="logger">The logger to log to</param>
            <param name="e">The exception</param>
            <param name="prefix">The prefix message to include in the log message</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.Attempt(System.Action,PreEmptive.Analytics.Common.ILogger)">
            <summary>
            Attempt the action and swallow any exceptions it throws
            </summary>
            <param name="action">the action to execute</param>
            <param name="logger">A logger for debug log messages to be sent to</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.Attempt``1(System.Func{``0},PreEmptive.Analytics.Common.ILogger)">
            <summary>
            Attempt the action and swallow any exceptions it throws
            </summary>
            <param name="action">the action to execute</param>
            <param name="logger">A logger for debug log messages to be sent to</param>
        </member>
        <member name="M:PreEmptive.Analytics.Common.Utilities.Utils.MergeStopDefaults(PreEmptive.Analytics.Common.IPlatform,PreEmptive.Analytics.Common.Configuration)">
            <summary>
            Will merge the defaults of the platform with an existing configuration. 
            Any nulls will be replaced by platform defaults
            </summary>
            <param name="platform">The platform to merge from</param>
            <param name="config">The configurate instance to modify</param>
        </member>
    </members>
</doc>
